{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/kristynacoufalova/Documents/geometry_review/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co'\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key'\n\n// Only create client if we have real credentials\nexport const supabase = supabaseUrl.includes('placeholder') \n  ? null \n  : createClient(supabaseUrl, supabaseAnonKey)\n"],"names":[],"mappings":";;;;AAEoB;AAFpB;;AAEA,MAAM,cAAc,gFAAwC;AAC5D,MAAM,kBAAkB,wPAA6C;AAG9D,MAAM,WAAW,YAAY,QAAQ,CAAC,iBACzC,OACA,IAAA,0OAAY,EAAC,aAAa","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/kristynacoufalova/Documents/geometry_review/app/contexts/AuthContext.tsx"],"sourcesContent":["'use client'\n\nimport { createContext, useContext, useEffect, useState } from 'react'\nimport { User as SupabaseUser } from '@supabase/supabase-js'\nimport { supabase } from '../../lib/supabase'\n\ninterface AuthContextType {\n  user: SupabaseUser | null\n  loading: boolean\n  signOut: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType>({\n  user: null,\n  loading: true,\n  signOut: async () => {},\n})\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<SupabaseUser | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    // Get initial session\n    const getInitialSession = async () => {\n      const { data: { session } } = await supabase.auth.getSession()\n      setUser(session?.user ?? null)\n      setLoading(false)\n    }\n\n    getInitialSession()\n\n    // Listen for auth changes\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        setUser(session?.user ?? null)\n        setLoading(false)\n      }\n    )\n\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const signOut = async () => {\n    await supabase.auth.signOut()\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, loading, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  return context\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AAEA;;;AAJA;;;AAYA,MAAM,4BAAc,IAAA,8MAAa,EAAkB;IACjD,MAAM;IACN,SAAS;IACT,SAAS,WAAa;AACxB;AAEO,SAAS,aAAa,KAA2C;QAA3C,EAAE,QAAQ,EAAiC,GAA3C;;IAC3B,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,yMAAQ,EAAsB;IACtD,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,yMAAQ,EAAC;IAEvC,IAAA,0MAAS;kCAAC;YACR,sBAAsB;YACtB,MAAM;4DAAoB;oBACxB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,8JAAQ,CAAC,IAAI,CAAC,UAAU;wBACpD;oBAAR,QAAQ,CAAA,gBAAA,oBAAA,8BAAA,QAAS,IAAI,cAAb,2BAAA,gBAAiB;oBACzB,WAAW;gBACb;;YAEA;YAEA,0BAA0B;YAC1B,MAAM,EAAE,MAAM,EAAE,YAAY,EAAE,EAAE,GAAG,8JAAQ,CAAC,IAAI,CAAC,iBAAiB;0CAChE,OAAO,OAAO;wBACJ;oBAAR,QAAQ,CAAA,gBAAA,oBAAA,8BAAA,QAAS,IAAI,cAAb,2BAAA,gBAAiB;oBACzB,WAAW;gBACb;;YAGF;0CAAO,IAAM,aAAa,WAAW;;QACvC;iCAAG,EAAE;IAEL,MAAM,UAAU;QACd,MAAM,8JAAQ,CAAC,IAAI,CAAC,OAAO;IAC7B;IAEA,qBACE,6NAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAS;QAAQ;kBACnD;;;;;;AAGP;GAlCgB;KAAA;AAoCT,SAAS;;IACd,MAAM,UAAU,IAAA,2MAAU,EAAC;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB","debugId":null}}]
}