{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/kristynacoufalova/Documents/geometry_review/node_modules/jsxgraph/src/parser/geonext.js"],"sourcesContent":["/*\n    Copyright 2008-2025\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true*/\n/*jslint nomen: true, plusplus: true*/\n\nimport JXG from \"../jxg.js\";\nimport Const from \"../base/constants.js\";\nimport Type from \"../utils/type.js\";\n\n/**\n * Parser helper routines. The methods in here are for parsing expressions in Geonext Syntax.\n * @namespace\n */\nJXG.GeonextParser = {\n    /**\n     * Converts expression of the form <i>leftop^rightop</i> into <i>Math.pow(leftop,rightop)</i>.\n     * @param {String} te Expression of the form <i>leftop^rightop</i>\n     * @returns {String} Converted expression.\n     */\n    replacePow: function (te) {\n        var count, pos, c, previousIndex, leftop, rightop, pre, p, left, i, right, expr;\n\n        // delete all whitespace immediately before and after all ^ operators\n        te = te.replace(/(\\s*)\\^(\\s*)/g, \"^\");\n\n        //  Loop over all ^ operators\n        i = te.indexOf(\"^\");\n        previousIndex = -1;\n\n        while (i >= 0 && i < te.length - 1) {\n            if (previousIndex === i) {\n                throw new Error(\"JSXGraph: Error while parsing expression '\" + te + \"'\");\n            }\n            previousIndex = i;\n\n            // left and right are the substrings before, resp. after the ^ character\n            left = te.slice(0, i);\n            right = te.slice(i + 1);\n\n            // If there is a \")\" immediately before the ^ operator, it can be the end of a\n            // (i) term in parenthesis\n            // (ii) function call\n            // (iii) method  call\n            // In either case, first the corresponding opening parenthesis is searched.\n            // This is the case, when count==0\n            if (left.charAt(left.length - 1) === \")\") {\n                count = 1;\n                pos = left.length - 2;\n\n                while (pos >= 0 && count > 0) {\n                    c = left.charAt(pos);\n                    if (c === \")\") {\n                        count++;\n                    } else if (c === \"(\") {\n                        count -= 1;\n                    }\n                    pos -= 1;\n                }\n\n                if (count === 0) {\n                    // Now, we have found the opning parenthesis and we have to look\n                    // if it is (i), or (ii), (iii).\n                    leftop = \"\";\n                    // Search for F or p.M before (...)^\n                    pre = left.substring(0, pos + 1);\n                    p = pos;\n                    while (p >= 0 && pre.slice(p, p + 1).match(/([\\w.]+)/)) {\n                        leftop = RegExp.$1 + leftop;\n                        p -= 1;\n                    }\n                    leftop += left.substring(pos + 1, left.length);\n                    leftop = leftop.replace(/([()+*%^\\-/\\][])/g, \"\\\\$1\");\n                } else {\n                    throw new Error(\"JSXGraph: Missing '(' in expression\");\n                }\n            } else {\n                // Otherwise, the operand has to be a constant (or variable).\n                leftop = \"[\\\\w\\\\.]+\"; // former: \\\\w\\\\.\n            }\n\n            // To the right of the ^ operator there also may be a function or method call\n            // or a term in parenthesis. Alos, ere we search for the closing\n            // parenthesis.\n            if (right.match(/^([\\w.]*\\()/)) {\n                count = 1;\n                pos = RegExp.$1.length;\n\n                while (pos < right.length && count > 0) {\n                    c = right.charAt(pos);\n\n                    if (c === \")\") {\n                        count -= 1;\n                    } else if (c === \"(\") {\n                        count += 1;\n                    }\n                    pos += 1;\n                }\n\n                if (count === 0) {\n                    rightop = right.substring(0, pos);\n                    rightop = rightop.replace(/([()+*%^\\-/[\\]])/g, \"\\\\$1\");\n                } else {\n                    throw new Error(\"JSXGraph: Missing ')' in expression\");\n                }\n            } else {\n                // Otherwise, the operand has to be a constant (or variable).\n                rightop = \"[\\\\w\\\\.]+\";\n            }\n            // Now, we have the two operands and replace ^ by JXG.Math.pow\n            expr = new RegExp(\"(\" + leftop + \")\\\\^(\" + rightop + \")\");\n            //te = te.replace(expr, 'JXG.Math.pow($1,$2)');\n            te = te.replace(expr, \"pow($1,$2)\");\n            i = te.indexOf(\"^\");\n        }\n\n        return te;\n    },\n\n    /**\n     * Converts expression of the form <i>If(a,b,c)</i> into <i>(a)?(b):(c)/i>.\n     * @param {String} te Expression of the form <i>If(a,b,c)</i>\n     * @returns {String} Converted expression.\n     */\n    replaceIf: function (te) {\n        var left,\n            right,\n            i,\n            pos,\n            count,\n            k1,\n            k2,\n            c,\n            meat,\n            s = \"\",\n            first = null,\n            second = null,\n            third = null;\n\n        i = te.indexOf(\"If(\");\n        if (i < 0) {\n            return te;\n        }\n\n        // \"\" means not defined. Here, we replace it by 0\n        te = te.replace(/\"\"/g, \"0\");\n        while (i >= 0) {\n            left = te.slice(0, i);\n            right = te.slice(i + 3);\n\n            // Search the end of the If() command and take out the meat\n            count = 1;\n            pos = 0;\n            k1 = -1;\n            k2 = -1;\n\n            while (pos < right.length && count > 0) {\n                c = right.charAt(pos);\n\n                if (c === \")\") {\n                    count -= 1;\n                } else if (c === \"(\") {\n                    count += 1;\n                } else if (c === \",\" && count === 1) {\n                    if (k1 < 0) {\n                        // first komma\n                        k1 = pos;\n                    } else {\n                        // second komma\n                        k2 = pos;\n                    }\n                }\n                pos += 1;\n            }\n            meat = right.slice(0, pos - 1);\n            right = right.slice(pos);\n\n            // Test the two kommas\n            if (k1 < 0) {\n                // , missing\n                return \"\";\n            }\n\n            if (k2 < 0) {\n                // , missing\n                return \"\";\n            }\n\n            first = meat.slice(0, k1);\n            second = meat.slice(k1 + 1, k2);\n            third = meat.slice(k2 + 1);\n\n            // Recurse\n            first = this.replaceIf(first);\n            second = this.replaceIf(second);\n            third = this.replaceIf(third);\n\n            s += left + \"((\" + first + \")?\" + \"(\" + second + \"):(\" + third + \"))\";\n            te = right;\n            first = null;\n            second = null;\n            i = te.indexOf(\"If(\");\n        }\n        s += right;\n        return s;\n    },\n\n    /**\n     * Replace an element's name in terms by an element's id.\n     * @param {String} term Term containing names of elements.\n     * @param {JXG.Board} board Reference to the board the elements are on.\n     * @param {Boolean} [jc=false] If true, all id's will be surrounded by <tt>$('</tt> and <tt>')</tt>.\n     * @returns {String} The same string with names replaced by ids.\n     **/\n    replaceNameById: function (term, board, jc) {\n        var end,\n            elName,\n            el,\n            i,\n            pos = 0,\n            funcs = [\"X\", \"Y\", \"L\", \"V\"],\n            printId = function (id) {\n                if (jc) {\n                    return \"$('\" + id + \"')\";\n                }\n\n                return id;\n            };\n\n        // Find X(el), Y(el), ...\n        // All functions declared in funcs\n        for (i = 0; i < funcs.length; i++) {\n            pos = term.indexOf(funcs[i] + \"(\");\n\n            while (pos >= 0) {\n                if (pos >= 0) {\n                    end = term.indexOf(\")\", pos + 2);\n                    if (end >= 0) {\n                        elName = term.slice(pos + 2, end);\n                        elName = elName.replace(/\\\\(['\"])?/g, \"$1\");\n                        el = board.elementsByName[elName];\n\n                        if (el) {\n                            term =\n                                term.slice(0, pos + 2) +\n                                (jc ? \"$('\" : \"\") +\n                                printId(el.id) +\n                                term.slice(end);\n                        }\n                    }\n                }\n                end = term.indexOf(\")\", pos + 2);\n                pos = term.indexOf(funcs[i] + \"(\", end);\n            }\n        }\n\n        pos = term.indexOf(\"Dist(\");\n        while (pos >= 0) {\n            if (pos >= 0) {\n                end = term.indexOf(\",\", pos + 5);\n                if (end >= 0) {\n                    elName = term.slice(pos + 5, end);\n                    elName = elName.replace(/\\\\(['\"])?/g, \"$1\");\n                    el = board.elementsByName[elName];\n\n                    if (el) {\n                        term = term.slice(0, pos + 5) + printId(el.id) + term.slice(end);\n                    }\n                }\n            }\n            end = term.indexOf(\",\", pos + 5);\n            pos = term.indexOf(\",\", end);\n            end = term.indexOf(\")\", pos + 1);\n\n            if (end >= 0) {\n                elName = term.slice(pos + 1, end);\n                elName = elName.replace(/\\\\(['\"])?/g, \"$1\");\n                el = board.elementsByName[elName];\n\n                if (el) {\n                    term = term.slice(0, pos + 1) + printId(el.id) + term.slice(end);\n                }\n            }\n            end = term.indexOf(\")\", pos + 1);\n            pos = term.indexOf(\"Dist(\", end);\n        }\n\n        funcs = [\"Deg\", \"Rad\"];\n        for (i = 0; i < funcs.length; i++) {\n            pos = term.indexOf(funcs[i] + \"(\");\n            while (pos >= 0) {\n                if (pos >= 0) {\n                    end = term.indexOf(\",\", pos + 4);\n                    if (end >= 0) {\n                        elName = term.slice(pos + 4, end);\n                        elName = elName.replace(/\\\\(['\"])?/g, \"$1\");\n                        el = board.elementsByName[elName];\n\n                        if (el) {\n                            term = term.slice(0, pos + 4) + printId(el.id) + term.slice(end);\n                        }\n                    }\n                }\n\n                end = term.indexOf(\",\", pos + 4);\n                pos = term.indexOf(\",\", end);\n                end = term.indexOf(\",\", pos + 1);\n\n                if (end >= 0) {\n                    elName = term.slice(pos + 1, end);\n                    elName = elName.replace(/\\\\(['\"])?/g, \"$1\");\n                    el = board.elementsByName[elName];\n\n                    if (el) {\n                        term = term.slice(0, pos + 1) + printId(el.id) + term.slice(end);\n                    }\n                }\n\n                end = term.indexOf(\",\", pos + 1);\n                pos = term.indexOf(\",\", end);\n                end = term.indexOf(\")\", pos + 1);\n\n                if (end >= 0) {\n                    elName = term.slice(pos + 1, end);\n                    elName = elName.replace(/\\\\(['\"])?/g, \"$1\");\n                    el = board.elementsByName[elName];\n                    if (el) {\n                        term = term.slice(0, pos + 1) + printId(el.id) + term.slice(end);\n                    }\n                }\n\n                end = term.indexOf(\")\", pos + 1);\n                pos = term.indexOf(funcs[i] + \"(\", end);\n            }\n        }\n\n        return term;\n    },\n\n    /**\n     * Replaces element ids in terms by element this.board.objects['id'].\n     * @param {String} term A GEONE<sub>x</sub>T function string with JSXGraph ids in it.\n     * @returns {String} The input string with element ids replaced by this.board.objects[\"id\"].\n     **/\n    replaceIdByObj: function (term) {\n        // Search for expressions like \"X(gi23)\" or \"Y(gi23A)\" and convert them to objects['gi23'].X().\n        var expr = /(X|Y|L)\\(([\\w_]+)\\)/g;\n        term = term.replace(expr, \"$('$2').$1()\");\n\n        expr = /(V)\\(([\\w_]+)\\)/g;\n        term = term.replace(expr, \"$('$2').Value()\");\n\n        expr = /(Dist)\\(([\\w_]+),([\\w_]+)\\)/g;\n        term = term.replace(expr, \"dist($('$2'), $('$3'))\");\n\n        expr = /(Deg)\\(([\\w_]+),([ \\w[\\w_]+),([\\w_]+)\\)/g;\n        term = term.replace(expr, \"deg($('$2'),$('$3'),$('$4'))\");\n\n        // Search for Rad('gi23','gi24','gi25')\n        expr = /Rad\\(([\\w_]+),([\\w_]+),([\\w_]+)\\)/g;\n        term = term.replace(expr, \"rad($('$1'),$('$2'),$('$3'))\");\n\n        // it's ok, it will run through the jessiecode parser afterwards...\n        /*jslint regexp: true*/\n        expr = /N\\((.+)\\)/g;\n        term = term.replace(expr, \"($1)\");\n\n        return term;\n    },\n\n    /**\n     * Converts the given algebraic expression in GEONE<sub>x</sub>T syntax into an equivalent expression in JavaScript syntax.\n     * @param {String} term Expression in GEONExT syntax\n     * @param {JXG.Board} board\n     * @returns {String} Given expression translated to JavaScript.\n     */\n    geonext2JS: function (term, board) {\n        var expr,\n            newterm,\n            i,\n            from = [\n                \"Abs\",\n                \"ACos\",\n                \"ASin\",\n                \"ATan\",\n                \"Ceil\",\n                \"Cos\",\n                \"Exp\",\n                \"Factorial\",\n                \"Floor\",\n                \"Log\",\n                \"Max\",\n                \"Min\",\n                \"Random\",\n                \"Round\",\n                \"Sin\",\n                \"Sqrt\",\n                \"Tan\",\n                \"Trunc\"\n            ],\n            to = [\n                \"abs\",\n                \"acos\",\n                \"asin\",\n                \"atan\",\n                \"ceil\",\n                \"cos\",\n                \"exp\",\n                \"factorial\",\n                \"floor\",\n                \"log\",\n                \"max\",\n                \"min\",\n                \"random\",\n                \"round\",\n                \"sin\",\n                \"sqrt\",\n                \"tan\",\n                \"ceil\"\n            ];\n\n        // Hacks, to enable not well formed XML, @see JXG.GeonextReader#replaceLessThan\n        term = term.replace(/&lt;/g, \"<\");\n        term = term.replace(/&gt;/g, \">\");\n        term = term.replace(/&amp;/g, \"&\");\n\n        // Convert GEONExT syntax to JavaScript syntax\n        newterm = term;\n        newterm = this.replaceNameById(newterm, board);\n        newterm = this.replaceIf(newterm);\n        // Exponentiations-Problem x^y -> Math(exp(x,y).\n        newterm = this.replacePow(newterm);\n        newterm = this.replaceIdByObj(newterm);\n\n        for (i = 0; i < from.length; i++) {\n            // sin -> Math.sin and asin -> Math.asin\n            expr = new RegExp([\"(\\\\W|^)(\", from[i], \")\"].join(\"\"), \"ig\");\n            newterm = newterm.replace(expr, [\"$1\", to[i]].join(\"\"));\n        }\n        newterm = newterm.replace(/True/g, \"true\");\n        newterm = newterm.replace(/False/g, \"false\");\n        newterm = newterm.replace(/fasle/g, \"false\");\n        newterm = newterm.replace(/Pi/g, \"PI\");\n        newterm = newterm.replace(/\"/g, \"'\");\n\n        return newterm;\n    },\n\n    /**\n     * Finds dependencies in a given term and resolves them by adding the\n     * dependent object to the found objects child elements.\n     * @param {JXG.GeometryElement} me Object depending on objects in given term.\n     * @param {String} term String containing dependencies for the given object.\n     * @param {JXG.Board} [board=me.board] Reference to a board\n     */\n    findDependencies: function (me, term, board) {\n        var elements, el, expr, elmask;\n\n        if (!Type.exists(board)) {\n            board = me.board;\n        }\n\n        elements = board.elementsByName;\n\n        for (el in elements) {\n            if (elements.hasOwnProperty(el)) {\n                if (el !== me.name) {\n                    if (elements[el].elementClass === Const.OBJECT_CLASS_TEXT) {\n                        if (!elements[el].evalVisProp('islabel')) {\n                            elmask = el.replace(/\\[/g, \"\\\\[\");\n                            elmask = elmask.replace(/\\]/g, \"\\\\]\");\n\n                            // Searches (A), (A,B),(A,B,C)\n                            expr = new RegExp(\n                                \"\\\\(([\\\\w\\\\[\\\\]'_ ]+,)*(\" + elmask + \")(,[\\\\w\\\\[\\\\]'_ ]+)*\\\\)\",\n                                \"g\"\n                            );\n\n                            if (term.search(expr) >= 0) {\n                                elements[el].addChild(me);\n                            }\n                        }\n                    } else {\n                        elmask = el.replace(/\\[/g, \"\\\\[\");\n                        elmask = elmask.replace(/\\]/g, \"\\\\]\");\n\n                        // Searches (A), (A,B),(A,B,C)\n                        expr = new RegExp(\n                            \"\\\\(([\\\\w\\\\[\\\\]'_ ]+,)*(\" + elmask + \")(,[\\\\w\\\\[\\\\]'_ ]+)*\\\\)\",\n                            \"g\"\n                        );\n\n                        if (term.search(expr) >= 0) {\n                            elements[el].addChild(me);\n                        }\n                    }\n                }\n            }\n        }\n    },\n\n    /**\n     * Converts the given algebraic expression in GEONE<sub>x</sub>T syntax into an equivalent expression in JessieCode syntax.\n     * @param {String} term Expression in GEONExT syntax\n     * @param {JXG.Board} board\n     * @returns {String} Given expression translated to JavaScript.\n     */\n    gxt2jc: function (term, board) {\n        var newterm;\n            // from = [\"Sqrt\"],\n            // to = [\"sqrt\"];\n\n        // Hacks, to enable not well formed XML, @see JXG.GeonextReader#replaceLessThan\n        term = term.replace(/&lt;/g, \"<\");\n        term = term.replace(/&gt;/g, \">\");\n        term = term.replace(/&amp;/g, \"&\");\n        newterm = term;\n        newterm = this.replaceNameById(newterm, board, true);\n        newterm = newterm.replace(/True/g, \"true\");\n        newterm = newterm.replace(/False/g, \"false\");\n        newterm = newterm.replace(/fasle/g, \"false\");\n\n        return newterm;\n    }\n};\n\nexport default JXG.GeonextParser;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 473, "column": 0}, "map": {"version":3,"sources":["file:///Users/kristynacoufalova/Documents/geometry_review/node_modules/jsxgraph/src/parser/jessiecode.js"],"sourcesContent":["/*\n JessieCode Interpreter and Compiler\n\n    Copyright 2011-2023\n        Michael Gerhaeuser,\n        Alfred Wassermann\n\n    JessieCode is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JessieCode is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JessieCode. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true, window: true, console: true, self: true, document: true, parser: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview JessieCode is a scripting language designed to provide a\n * simple scripting language to build constructions\n * with JSXGraph. It is similar to JavaScript, but prevents access to the DOM.\n * Hence, it can be used in community driven math portals which want to use\n * JSXGraph to display interactive math graphics.\n */\n\nimport JXG from \"../jxg.js\";\nimport Const from \"../base/constants.js\";\nimport Text from \"../base/text.js\";\nimport Mat from \"../math/math.js\";\nimport Interval from \"../math/ia.js\";\nimport Geometry from \"../math/geometry.js\";\nimport Statistics from \"../math/statistics.js\";\nimport Type from \"../utils/type.js\";\nimport Env from \"../utils/env.js\";\n\n// IE 6-8 compatibility\nif (!Object.create) {\n    Object.create = function (o, properties) {\n        if (typeof o !== 'object' && typeof o !== 'function') throw new TypeError('Object prototype may only be an Object: ' + o);\n        else if (o === null) throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support 'null' as the first argument.\");\n\n        if (typeof properties != 'undefined') throw new Error(\"This browser's implementation of Object.create is a shim and doesn't support a second argument.\");\n\n        function F() { }\n\n        F.prototype = o;\n\n        return new F();\n    };\n}\n\nvar priv = {\n    modules: {\n        'math': Mat,\n        'math/geometry': Geometry,\n        'math/statistics': Statistics,\n        'math/numerics': Mat.Numerics\n    }\n};\n\n/**\n * A JessieCode object provides an interface to the parser and stores all variables and objects used within a JessieCode script.\n * The optional argument <tt>code</tt> is interpreted after initializing. To evaluate more code after initializing a JessieCode instance\n * please use {@link JXG.JessieCode#parse}. For code snippets like single expressions use {@link JXG.JessieCode#snippet}.\n * @constructor\n * @param {String} [code] Code to parse.\n * @param {Boolean} [geonext=false] Geonext compatibility mode.\n */\nJXG.JessieCode = function (code, geonext) {\n    // Control structures\n\n    /**\n     * The global scope.\n     * @type Object\n     */\n    this.scope = {\n        id: 0,\n        hasChild: true,\n        args: [],\n        locals: {},\n        context: null,\n        previous: null\n    };\n\n    /**\n     * Keeps track of all possible scopes every required.\n     * @type Array\n     */\n    this.scopes = [];\n    this.scopes.push(this.scope);\n\n    /**\n     * A stack to store debug information (like line and column where it was defined) of a parameter\n     * @type Array\n     * @private\n     */\n    this.dpstack = [[]];\n\n    /**\n     * Determines the parameter stack scope.\n     * @type Number\n     * @private\n     */\n    this.pscope = 0;\n\n    /**\n     * Used to store the property-value definition while parsing an object literal.\n     * @type Array\n     * @private\n     */\n    this.propstack = [{}];\n\n    /**\n     * The current scope of the object literal stack {@link JXG.JessieCode#propstack}.\n     * @type Number\n     * @private\n     */\n    this.propscope = 0;\n\n    /**\n     * Store the left hand side of an assignment. If an element is constructed and no attributes are given, this is\n     * used as the element's name.\n     * @type Array\n     * @private\n     */\n    this.lhs = [];\n\n    /**\n     * lhs flag, used by JXG.JessieCode#replaceNames\n     * @type Boolean\n     * @default false\n     */\n    this.isLHS = false;\n\n    /**\n     * The id of an HTML node in which innerHTML all warnings are stored (if no <tt>console</tt> object is available).\n     * @type String\n     * @default 'jcwarn'\n     */\n    this.warnLog = 'jcwarn';\n\n    /**\n     * Store $log messages in case there's no console.\n     * @type Array\n     */\n    this.$log = [];\n\n    /**\n     * Built-in functions and constants\n     * @type Object\n     */\n    this.builtIn = this.defineBuiltIn();\n\n    /**\n     * List of all possible operands in JessieCode (except of JSXGraph objects).\n     * @type Object\n     */\n    this.operands = this.getPossibleOperands();\n\n    /**\n     * The board which currently is used to create and look up elements.\n     * @type JXG.Board\n     */\n    this.board = null;\n\n    /**\n     * Force slider names to return value instead of node\n     * @type Boolean\n     */\n    this.forceValueCall = false;\n\n    /**\n     * Keep track of which element is created in which line.\n     * @type Object\n     */\n    this.lineToElement = {};\n\n    this.parCurLine = 1;\n    this.parCurColumn = 0;\n    this.line = 1;\n    this.col = 1;\n\n    if (JXG.CA) {\n        this.CA = new JXG.CA(this.node, this.createNode, this);\n    }\n\n    this.code = '';\n\n    if (typeof code === 'string') {\n        this.parse(code, geonext);\n    }\n};\n\nJXG.extend(JXG.JessieCode.prototype, /** @lends JXG.JessieCode.prototype */ {\n    /**\n     * Create a new parse tree node.\n     * @param {String} type Type of node, e.g. node_op, node_var, or node_const\n     * @param value The nodes value, e.g. a variables value or a functions body.\n     * @param {Array} children Arbitrary number of child nodes.\n     */\n    node: function (type, value, children) {\n        return {\n            type: type,\n            value: value,\n            children: children\n        };\n    },\n\n    /**\n     * Create a new parse tree node. Basically the same as node(), but this builds\n     * the children part out of an arbitrary number of parameters, instead of one\n     * array parameter.\n     * @param {String} type Type of node, e.g. node_op, node_var, or node_const\n     * @param value The nodes value, e.g. a variables value or a functions body.\n     * @param children Arbitrary number of parameters; define the child nodes.\n     */\n    createNode: function (type, value, children) {\n        var n = this.node(type, value, []),\n            i;\n\n        for (i = 2; i < arguments.length; i++) {\n            n.children.push(arguments[i]);\n        }\n\n        if (n.type === 'node_const' && Type.isNumber(n.value)) {\n            n.isMath = true;\n        }\n\n        n.line = this.parCurLine;\n        n.col = this.parCurColumn;\n\n        return n;\n    },\n\n    /**\n     * Create a new scope.\n     * @param {Array} args\n     * @returns {Object}\n     */\n    pushScope: function (args) {\n        var scope = {\n            args: args,\n            locals: {},\n            context: null,\n            previous: this.scope\n        };\n\n        this.scope.hasChild = true;\n        this.scope = scope;\n        scope.id = this.scopes.push(scope) - 1;\n\n        return scope;\n    },\n\n    /**\n     * Remove the current scope and reinstate the previous scope\n     * @returns {Object}\n     */\n    popScope: function () {\n        var s = this.scope.previous;\n\n        // make sure the global scope is not lost\n        this.scope = s !== null ? s : this.scope;\n\n        return this.scope;\n    },\n\n    /**\n     * Looks up an {@link JXG.GeometryElement} by its id.\n     * @param {String} id\n     * @returns {JXG.GeometryElement}\n     */\n    getElementById: function (id) {\n        return this.board.objects[id];\n    },\n\n    log: function () {\n        this.$log.push(arguments);\n\n        if (typeof console === 'object' && console.log) {\n            console.log.apply(console, arguments);\n        }\n    },\n\n    /**\n     * Returns a element creator function which takes two parameters: the parents array and the attributes object.\n     * @param {String} vname The element type, e.g. 'point', 'line', 'midpoint'\n     * @returns {function}\n     */\n    creator: (function () {\n        // stores the already defined creators\n        var _ccache = {}, r;\n\n        r = function (vname) {\n            var f;\n\n            // _ccache is global, i.e. it is the same for ALL JessieCode instances.\n            // That's why we need the board id here\n            if (typeof _ccache[this.board.id + vname] === 'function') {\n                f = _ccache[this.board.id + vname];\n            } else {\n                f = (function (that) {\n                    return function (parameters, attributes) {\n                        var attr;\n\n                        if (Type.exists(attributes)) {\n                            attr = attributes;\n                        } else {\n                            attr = {};\n                        }\n                        if (attr.name === undefined && attr.id === undefined) {\n                            attr.name = (that.lhs[that.scope.id] !== 0 ? that.lhs[that.scope.id] : '');\n                        }\n                        return that.board.create(vname, parameters, attr);\n                    };\n                }(this));\n\n                f.creator = true;\n                _ccache[this.board.id + vname] = f;\n            }\n\n            return f;\n        };\n\n        r.clearCache = function () {\n            _ccache = {};\n        };\n\n        return r;\n    }()),\n\n    /**\n     * Assigns a value to a variable in the current scope.\n     * @param {String} vname Variable name\n     * @param value Anything\n     * @see JXG.JessieCode#sstack\n     * @see JXG.JessieCode#scope\n     */\n    letvar: function (vname, value) {\n        if (this.builtIn[vname]) {\n            this._warn('\"' + vname + '\" is a predefined value.');\n        }\n\n        this.scope.locals[vname] = value;\n    },\n\n    /**\n     * Checks if the given variable name can be found in the current scope chain.\n     * @param {String} vname\n     * @returns {Object} A reference to the scope object the variable can be found in or null if it can't be found.\n     */\n    isLocalVariable: function (vname) {\n        var s = this.scope;\n\n        while (s !== null) {\n            if (Type.exists(s.locals[vname])) {\n                return s;\n            }\n\n            s = s.previous;\n        }\n\n        return null;\n    },\n\n    /**\n     * Checks if the given variable name is a parameter in any scope from the current to the global scope.\n     * @param {String} vname\n     * @returns {Object} A reference to the scope object that contains the variable in its arg list.\n     */\n    isParameter: function (vname) {\n        var s = this.scope;\n\n        while (s !== null) {\n            if (Type.indexOf(s.args, vname) > -1) {\n                return s;\n            }\n\n            s = s.previous;\n        }\n\n        return null;\n    },\n\n    /**\n     * Checks if the given variable name is a valid creator method.\n     * @param {String} vname\n     * @returns {Boolean}\n     */\n    isCreator: function (vname) {\n        // check for an element with this name\n        return !!JXG.elements[vname];\n    },\n\n    /**\n     * Checks if the given variable identifier is a valid member of the JavaScript Math Object.\n     * @param {String} vname\n     * @returns {Boolean}\n     */\n    isMathMethod: function (vname) {\n        return vname !== 'E' && !!Math[vname];\n    },\n\n    /**\n     * Returns true if the given identifier is a builtIn variable/function.\n     * @param {String} vname\n     * @returns {Boolean}\n     */\n    isBuiltIn: function (vname) {\n        return !!this.builtIn[vname];\n    },\n\n    /**\n     * Looks up the value of the given variable. We use a simple type inspection.\n     *\n     * @param {String} vname Name of the variable\n     * @param {Boolean} [local=false] Only look up the internal symbol table and don't look for\n     * the <tt>vname</tt> in Math or the element list.\n     * @param {Boolean} [isFunctionName=false] Lookup function of type builtIn, Math.*, creator.\n     *\n     * @see JXG.JessieCode#resolveType\n     */\n    getvar: function (vname, local, isFunctionName) {\n        var s;\n\n        local = Type.def(local, false);\n\n        // Local scope has always precedence\n        s = this.isLocalVariable(vname);\n\n        if (s !== null) {\n            return s.locals[vname];\n        }\n\n        // Handle the - so far only - few constants by hard coding them.\n        if (vname === '$board' || vname === 'EULER' || vname === 'PI') {\n            return this.builtIn[vname];\n        }\n\n        if (isFunctionName) {\n            if (this.isBuiltIn(vname)) {\n                return this.builtIn[vname];\n            }\n\n            if (this.isMathMethod(vname)) {\n                return Math[vname];\n            }\n\n            // check for an element with this name\n            if (this.isCreator(vname)) {\n                return this.creator(vname);\n            }\n        }\n\n        if (!local) {\n            s = this.board.select(vname);\n            if (s !== vname) {\n                return s;\n            }\n        }\n    },\n\n    /**\n     * Look up the value of a local variable.\n     * @param {string} vname\n     * @returns {*}\n     */\n    resolve: function (vname) {\n        var s = this.scope;\n\n        while (s !== null) {\n            if (Type.exists(s.locals[vname])) {\n                return s.locals[vname];\n            }\n\n            s = s.previous;\n        }\n    },\n\n    /**\n     * TODO this needs to be called from JS and should not generate JS code\n     * Looks up a variable identifier in various tables and generates JavaScript code that could be eval'd to get the value.\n     * @param {String} vname Identifier\n     * @param {Boolean} [local=false] Don't resolve ids and names of elements\n     * @param {Boolean} [withProps=false]\n     */\n    getvarJS: function (vname, local, withProps) {\n        var s, r = '', re;\n\n        local = Type.def(local, false);\n        withProps = Type.def(withProps, false);\n\n        s = this.isParameter(vname);\n        if (s !== null) {\n            return vname;\n        }\n\n        s = this.isLocalVariable(vname);\n        if (s !== null && !withProps) {\n            return '$jc$.resolve(\\'' + vname + '\\')';\n        }\n\n        // check for an element with this name\n        if (this.isCreator(vname)) {\n            return '(function () { var a = Array.prototype.slice.call(arguments, 0), props = ' + (withProps ? 'a.pop()' : '{}') + '; return $jc$.board.create.apply($jc$.board, [\\'' + vname + '\\'].concat([a, props])); })';\n        }\n\n        if (withProps) {\n            this._error('Syntax error (attribute values are allowed with element creators only)');\n        }\n\n        if (this.isBuiltIn(vname)) {\n            // If src does not exist, it is a number. In that case, just return the value.\n            r = this.builtIn[vname].src || this.builtIn[vname];\n\n            // Get the \"real\" name of the function\n            if (Type.isNumber(r)) {\n                return r;\n            }\n            // Search a JSXGraph object in board\n            if (r.match(/board\\.select/)) {\n                return r;\n            }\n\n            /* eslint-disable no-useless-escape */\n            vname = r.split('.').pop();\n            if (Type.exists(this.board.mathLib)) {\n                // Handle builtin case: ln(x) -> Math.log\n                re = new RegExp('^Math\\.' + vname);\n                if (re.exec(r) !== null) {\n                    return r.replace(re, '$jc$.board.mathLib.' + vname);\n                }\n            }\n            if (Type.exists(this.board.mathLibJXG)) {\n                // Handle builtin case: factorial(x) -> JXG.Math.factorial\n                re = new RegExp('^JXG\\.Math\\.');\n                if (re.exec(r) !== null) {\n                    return r.replace(re, '$jc$.board.mathLibJXG.');\n                }\n                return r;\n            }\n            /* eslint-enable no-useless-escape */\n            return r;\n\n            // return this.builtIn[vname].src || this.builtIn[vname];\n        }\n\n        if (this.isMathMethod(vname)) {\n            return '$jc$.board.mathLib.' + vname;\n            //                return 'Math.' + vname;\n        }\n\n        // if (!local) {\n        //     if (Type.isId(this.board, vname)) {\n        //         r = '$jc$.board.objects[\\'' + vname + '\\']';\n        //     } else if (Type.isName(this.board, vname)) {\n        //         r = '$jc$.board.elementsByName[\\'' + vname + '\\']';\n        //     } else if (Type.isGroup(this.board, vname)) {\n        //         r = '$jc$.board.groups[\\'' + vname + '\\']';\n        //     }\n\n        //     return r;\n        // }\n        if (!local) {\n            if (Type.isId(this.board, vname)) {\n                r = '$jc$.board.objects[\\'' + vname + '\\']';\n                if (this.board.objects[vname].elType === 'slider') {\n                    r += '.Value()';\n                }\n            } else if (Type.isName(this.board, vname)) {\n                r = '$jc$.board.elementsByName[\\'' + vname + '\\']';\n                if (this.board.elementsByName[vname].elType === 'slider') {\n                    r += '.Value()';\n                }\n            } else if (Type.isGroup(this.board, vname)) {\n                r = '$jc$.board.groups[\\'' + vname + '\\']';\n            }\n\n            return r;\n        }\n\n        return '';\n    },\n\n    /**\n     * Adds the property <tt>isMap</tt> to a function and sets it to true.\n     * @param {function} f\n     * @returns {function}\n     */\n    makeMap: function (f) {\n        f.isMap = true;\n\n        return f;\n    },\n\n    functionCodeJS: function (node) {\n        var p = node.children[0].join(', '),\n            bo = '',\n            bc = '';\n\n        if (node.value === 'op_map') {\n            bo = '{ return  ';\n            bc = ' }';\n        }\n\n        return 'function (' + p + ') {\\n' +\n            'var $oldscope$ = $jc$.scope;\\n' +\n            '$jc$.scope = $jc$.scopes[' + this.scope.id + '];\\n' +\n            'var r = (function () ' + bo + this.compile(node.children[1], true) + bc + ')();\\n' +\n            '$jc$.scope = $oldscope$;\\n' +\n            'return r;\\n' +\n            '}';\n    },\n\n    /**\n     * Converts a node type <tt>node_op</tt> and value <tt>op_map</tt> or <tt>op_function</tt> into a executable\n     * function. Does a simple type inspection.\n     * @param {Object} node\n     * @returns {function}\n     * @see JXG.JessieCode#resolveType\n     */\n    defineFunction: function (node) {\n        var fun, i, that = this,\n            list = node.children[0],\n            scope = this.pushScope(list);\n\n        if (this.board.options.jc.compile) {\n            this.isLHS = false;\n\n            // we currently need to put the parameters into the local scope\n            // until the compiled JS variable lookup code is fixed\n            for (i = 0; i < list.length; i++) {\n                scope.locals[list[i]] = list[i];\n            }\n\n            this.replaceNames(node.children[1]);\n\n            /** @ignore */\n            fun = (function (jc) {\n                var fun,\n                    // str = 'var f = ' + $jc$.functionCodeJS(node) + '; f;';\n                    str = 'var f = function($jc$) { return ' +\n                        jc.functionCodeJS(node) +\n                        '}; f;';\n\n                try {\n                    // yeah, eval is evil, but we don't have much choice here.\n                    // the str is well defined and there is no user input in it that we didn't check before\n\n                    /*jslint evil:true*/\n                    // fun = eval(str);\n                    fun = eval(str)(jc);\n                    /*jslint evil:false*/\n\n                    scope.argtypes = [];\n                    for (i = 0; i < list.length; i++) {\n                        scope.argtypes.push(that.resolveType(list[i], node));\n                    }\n\n                    return fun;\n                } catch (e) {\n                    // $jc$._warn('error compiling function\\n\\n' + str + '\\n\\n' + e.toString());\n                    jc._warn(\"error compiling function\\n\\n\" + str + \"\\n\\n\" + e.toString());\n                    return function () { };\n                }\n            }(this));\n\n            // clean up scope\n            this.popScope();\n        } else {\n            /** @ignore */\n            fun = (function (_pstack, that, id) {\n                return function () {\n                    var r, oldscope;\n\n                    oldscope = that.scope;\n                    that.scope = that.scopes[id];\n\n                    for (r = 0; r < _pstack.length; r++) {\n                        that.scope.locals[_pstack[r]] = arguments[r];\n                    }\n\n                    r = that.execute(node.children[1]);\n                    that.scope = oldscope;\n\n                    return r;\n                };\n            }(list, this, scope.id));\n        }\n\n        fun.node = node;\n        fun.scope = scope;\n        fun.toJS = fun.toString;\n        fun.toString = (function (_that) {\n            return function () {\n                return _that.compile(_that.replaceIDs(Type.deepCopy(node)));\n            };\n        }(this));\n\n        fun.deps = {};\n        this.collectDependencies(node.children[1], node.children[0], fun.deps);\n\n        return fun;\n    },\n\n    /**\n     * Merge all attribute values given with an element creator into one object.\n     * @param {Object} o An arbitrary number of objects\n     * @returns {Object} All given objects merged into one. If properties appear in more (case sensitive) than one\n     * object the last value is taken.\n     */\n    mergeAttributes: function (o) {\n        var i, attr = {};\n\n        for (i = 0; i < arguments.length; i++) {\n            attr = Type.deepCopy(attr, arguments[i], true);\n        }\n\n        return attr;\n    },\n\n    /**\n     * Sets the property <tt>what</tt> of <tt>o</tt> to <tt>value</tt>\n     * @param {JXG.Point|JXG.Text} o\n     * @param {String} what\n     * @param value\n     */\n    setProp: function (o, what, value) {\n        var par = {}, x, y;\n\n        if (o.elementClass === Const.OBJECT_CLASS_POINT && (what === 'X' || what === 'Y')) {\n            // set coords\n\n            what = what.toLowerCase();\n\n            // we have to deal with three cases here:\n            // o.isDraggable && typeof value === number:\n            //   stay draggable, just set the new coords (e.g. via moveTo)\n            // o.isDraggable && typeof value === function:\n            //   convert to !o.isDraggable, set the new coords via o.addConstraint()\n            // !o.isDraggable:\n            //   stay !o.isDraggable, update the given coord by overwriting X/YEval\n\n            if (o.isDraggable && typeof value === 'number') {\n                x = what === 'x' ? value : o.X();\n                y = what === 'y' ? value : o.Y();\n\n                o.setPosition(Const.COORDS_BY_USER, [x, y]);\n            } else if (o.isDraggable && (typeof value === 'function' || typeof value === 'string')) {\n                x = what === 'x' ? value : o.coords.usrCoords[1];\n                y = what === 'y' ? value : o.coords.usrCoords[2];\n\n                o.addConstraint([x, y]);\n            } else if (!o.isDraggable) {\n                x = what === 'x' ? value : o.XEval.origin;\n                y = what === 'y' ? value : o.YEval.origin;\n\n                o.addConstraint([x, y]);\n            }\n\n            this.board.update();\n        } else if (o.elementClass === Const.OBJECT_CLASS_TEXT && (what === 'X' || what === 'Y')) {\n            if (typeof value === 'number') {\n                o[what] = function () { return value; };\n            } else if (typeof value === 'function') {\n                o.isDraggable = false;\n                o[what] = value;\n            } else if (typeof value === 'string') {\n                o.isDraggable = false;\n                o[what] = Type.createFunction(value, this.board);\n                o[what + 'jc'] = value;\n            }\n\n            o[what].origin = value;\n\n            this.board.update();\n        } else if (o.type && o.elementClass && o.visProp) {\n            if (Type.exists(o[o.methodMap[what]]) && typeof o[o.methodMap[what]] !== 'function') {\n                o[o.methodMap[what]] = value;\n            } else {\n                par[what] = value;\n                o.setAttribute(par);\n            }\n        } else {\n            o[what] = value;\n        }\n    },\n\n    /**\n     * Generic method to parse JessieCode.\n     * This consists of generating an AST with parser.parse,\n     * apply simplifying rules from CA and\n     * manipulate the AST according to the second parameter \"cmd\".\n     * @param  {String} code      JessieCode code to be parsed\n     * @param  {String} cmd       Type of manipulation to be done with AST\n     * @param {Boolean} [geonext=false] Geonext compatibility mode.\n     * @param {Boolean} [dontstore=false] If false, the code string is stored in this.code,\n     *  i.e. in the JessieCode object, e.g. in board.jc.\n     * @return {Object} Returns result of computation as directed in cmd.\n     */\n    _genericParse: function (code, cmd, geonext, dontstore) {\n        var i, setTextBackup, ast, result,\n            ccode = code.replace(/\\r\\n/g, '\\n').split('\\n'),\n            cleaned = [];\n\n        if (!dontstore) {\n            this.code += code + '\\n';\n        }\n\n        if (Text) {\n            setTextBackup = Text.prototype.setText;\n            Text.prototype.setText = Text.prototype.setTextJessieCode;\n        }\n\n        try {\n            if (!Type.exists(geonext)) {\n                geonext = false;\n            }\n\n            for (i = 0; i < ccode.length; i++) {\n                if (geonext) {\n                    ccode[i] = JXG.GeonextParser.geonext2JS(ccode[i], this.board);\n                }\n                cleaned.push(ccode[i]);\n            }\n\n            code = cleaned.join('\\n');\n            ast = parser.parse(code);\n            if (this.CA) {\n                ast = this.CA.expandDerivatives(ast, null, ast);\n                ast = this.CA.removeTrivialNodes(ast);\n            }\n            switch (cmd) {\n                case 'parse':\n                    result = this.execute(ast);\n                    break;\n                case 'manipulate':\n                    result = this.compile(ast);\n                    break;\n                case 'getAst':\n                    result = ast;\n                    break;\n                default:\n                    result = false;\n            }\n        } catch (e) {  // catch is mandatory in old IEs\n            // console.log(e);\n            // We throw the error again,\n            // so the user can catch it.\n            throw e;\n        } finally {\n            // make sure the original text method is back in place\n            if (Text) {\n                Text.prototype.setText = setTextBackup;\n            }\n        }\n\n        return result;\n    },\n\n    /**\n     * Parses JessieCode.\n     * This consists of generating an AST with parser.parse, apply simplifying rules\n     * from CA and executing the ast by calling this.execute(ast).\n     *\n     * @param {String} code             JessieCode code to be parsed\n     * @param {Boolean} [geonext=false] Geonext compatibility mode.\n     * @param {Boolean} [dontstore=false] If false, the code string is stored in this.code.\n     * @return {Object}                 Parse JessieCode code and execute it.\n     */\n    parse: function (code, geonext, dontstore) {\n        return this._genericParse(code, 'parse', geonext, dontstore);\n    },\n\n    /**\n     * Manipulate JessieCode.\n     * This consists of generating an AST with parser.parse,\n     * apply simplifying rules from CA\n     * and compile the AST back to JessieCode.\n     *\n     * @param {String} code             JessieCode code to be parsed\n     * @param {Boolean} [geonext=false] Geonext compatibility mode.\n     * @param {Boolean} [dontstore=false] If false, the code string is stored in this.code.\n     * @return {String}                 Simplified JessieCode code\n     */\n    manipulate: function (code, geonext, dontstore) {\n        return this._genericParse(code, 'manipulate', geonext, dontstore);\n    },\n\n    /**\n     * Get abstract syntax tree (AST) from JessieCode code.\n     * This consists of generating an AST with parser.parse.\n     *\n     * @param {String} code\n     * @param {Boolean} [geonext=false] Geonext compatibility mode.\n     * @param {Boolean} [dontstore=false] If false, the code string is stored in this.code.\n     * @return {Node}  AST\n     */\n    getAST: function (code, geonext, dontstore) {\n        return this._genericParse(code, 'getAst', geonext, dontstore);\n    },\n\n    /**\n     * Parses a JessieCode snippet, e.g. \"3+4\", and wraps it into a function, if desired.\n     * @param {String} code A small snippet of JessieCode. Must not be an assignment.\n     * @param {Boolean} [funwrap=true] If true, the code is wrapped in a function.\n     * @param {String} [varname=''] Name of the parameter(s)\n     * @param {Boolean} [geonext=false] Geonext compatibility mode.\n     * @param {Boolean} [forceValueCall=true] Force evaluation of value method of sliders.\n     */\n    snippet: function (code, funwrap, varname, geonext, forceValueCall) {\n        var c;\n\n        funwrap = Type.def(funwrap, true);\n        varname = Type.def(varname, '');\n        geonext = Type.def(geonext, false);\n        this.forceValueCall = Type.def(forceValueCall, true);\n\n        c = (funwrap ? ' function (' + varname + ') { return ' : '') +\n                code +\n            (funwrap ? '; }' : '') + ';';\n\n        return this.parse(c, geonext, true);\n    },\n\n    /**\n     * Traverses through the given subtree and changes all values of nodes with the replaced flag set by\n     * {@link JXG.JessieCode#replaceNames} to the name of the element (if not empty).\n     * @param {Object} node\n     */\n    replaceIDs: function (node) {\n        var i, v;\n\n        if (node.replaced) {\n            // These children exist, if node.replaced is set.\n            v = this.board.objects[node.children[1][0].value];\n\n            if (Type.exists(v) && v.name !== \"\") {\n                node.type = 'node_var';\n                node.value = v.name;\n\n                // Maybe it's not necessary, but just to be sure that everything is cleaned up we better delete all\n                // children and the replaced flag\n                node.children.length = 0;\n                delete node.replaced;\n            }\n        }\n\n        if (Type.isArray(node)) {\n            for (i = 0; i < node.length; i++) {\n                node[i] = this.replaceIDs(node[i]);\n            }\n        }\n\n        if (node.children) {\n            // assignments are first evaluated on the right hand side\n            for (i = node.children.length; i > 0; i--) {\n                if (Type.exists(node.children[i - 1])) {\n                    node.children[i - 1] = this.replaceIDs(node.children[i - 1]);\n                }\n\n            }\n        }\n\n        return node;\n    },\n\n    /**\n     * Traverses through the given subtree and changes all elements referenced by names through referencing them by ID.\n     * An identifier is only replaced if it is not found in all scopes above the current scope and if it\n     * has not been blacklisted within the codeblock determined by the given subtree.\n     * @param {Object} node\n     * @param {Boolean} [callValuePar=false] if true, uses $value() instead of $() in createReplacementNode\n     */\n    replaceNames: function (node, callValuePar) {\n        var i, v,\n            callValue = false;\n\n        if (callValuePar !== undefined) {\n            callValue = callValuePar;\n        }\n\n        v = node.value;\n\n        // We are interested only in nodes of type node_var and node_op > op_lhs.\n        // Currently, we are not checking if the id is a local variable. in this case, we're stuck anyway.\n\n        if (node.type === 'node_op' && v === 'op_lhs' && node.children.length === 1) {\n            this.isLHS = true;\n        } else if (node.type === 'node_var') {\n            if (this.isLHS) {\n                this.letvar(v, true);\n            } else if (!Type.exists(this.getvar(v, true)) && Type.exists(this.board.elementsByName[v])) {\n                if (callValue && this.board.elementsByName[v].elType !== 'slider') {\n                    callValue = false;\n                }\n                node = this.createReplacementNode(node, callValue);\n            }\n        }\n\n        if (Type.isArray(node)) {\n            for (i = 0; i < node.length; i++) {\n                node[i] = this.replaceNames(node[i], callValue);\n            }\n        }\n\n        if (node.children) {\n            // Replace slider reference by call of slider.Value()\n            if (this.forceValueCall &&              // It must be enforced, see snippet.\n                (\n                    // 1. case: sin(a), max(a, 0), ...\n                    (node.value === \"op_execfun\" &&\n                        // Not in cases V(a), $(a)\n                        node.children[0].value !== 'V' && node.children[0].value !== '$' &&\n                        // Function must be a math function. This ensures that a number is required as input.\n                        (Type.exists(Math[node.children[0].value]) || Type.exists(Mat[node.children[0].value])) &&\n                        // node.children[1].length === 1 &&\n                        node.children[1][0].type === 'node_var'\n                    ) ||\n                    // 2. case: slider is the whole expression: 'a'\n                    (node.value === \"op_return\" &&\n                        node.children.length === 1 &&\n                        node.children[0].type === 'node_var'\n                    )\n                )\n            ) {\n                    callValue = true;\n            }\n\n            // Assignments are first evaluated on the right hand side\n            for (i = node.children.length; i > 0; i--) {\n                if (Type.exists(node.children[i - 1])) {\n                    node.children[i - 1] = this.replaceNames(node.children[i - 1], callValue);\n                }\n            }\n        }\n\n        if (node.type === 'node_op' && node.value === 'op_lhs' && node.children.length === 1) {\n            this.isLHS = false;\n        }\n\n        return node;\n    },\n\n    /**\n     * Replaces node_var nodes with node_op&gt;op_execfun nodes, calling the internal $() function with the id of the\n     * element accessed by the node_var node.\n     * @param {Object} node\n     * @param {Boolean} [callValue=undefined] if true, uses $value() instead of $()\n     * @returns {Object} op_execfun node\n     */\n    createReplacementNode: function (node, callValue) {\n        var v = node.value,\n            el = this.board.elementsByName[v];\n\n        // If callValue: get handle to this node_var and call its Value method.\n        // Otherwise return the object.\n        node = this.createNode('node_op', 'op_execfun',\n            this.createNode('node_var', (callValue === true ? '$value' : '$')),\n            [this.createNode('node_str', el.id)]);\n\n        node.replaced = true;\n\n        return node;\n    },\n\n    /**\n     * Search the parse tree below <tt>node</tt> for <em>stationary</em> dependencies, i.e. dependencies hard coded into\n     * the function.\n     * @param {Object} node\n     * @param {Array} varnames List of variable names of the function\n     * @param {Object} result An object where the referenced elements will be stored. Access key is their id.\n     */\n    collectDependencies: function (node, varnames, result) {\n        var i, v, e, le;\n\n        if (Type.isArray(node)) {\n            le = node.length;\n            for (i = 0; i < le; i++) {\n                this.collectDependencies(node[i], varnames, result);\n            }\n            return;\n        }\n\n        v = node.value;\n\n        if (node.type === 'node_var' &&\n            varnames.indexOf(v) < 0 // v is not contained in the list of variables of that function\n        ) {\n            e = this.getvar(v);\n            if (e && e.visProp && e.elType && e.elementClass && e.id\n                // Sliders are the only elements which are given by names.\n                // Wrong, a counter example is: circle(c, function() { return p1.Dist(p2); })\n                // && e.elType === 'slider'\n            ) {\n                result[e.id] = e;\n            }\n        }\n\n        // The $()-function-calls are special because their parameter is given as a string, not as a node_var.\n        if (node.type === 'node_op' && node.value === 'op_execfun' &&\n            node.children.length > 1 &&\n            (node.children[0].value === '$' || node.children[0].value === '$value') &&\n            node.children[1].length > 0) {\n\n            e = node.children[1][0].value;\n            result[e] = this.board.objects[e];\n        }\n\n        if (node.children) {\n            for (i = node.children.length; i > 0; i--) {\n                if (Type.exists(node.children[i - 1])) {\n                    this.collectDependencies(node.children[i - 1], varnames, result);\n                }\n            }\n        }\n    },\n\n    resolveProperty: function (e, v, compile) {\n        compile = Type.def(compile, false);\n\n        // is it a geometry element or a board?\n        if (e /*&& e.type && e.elementClass*/ && e.methodMap) {\n            // yeah, it is. but what does the user want?\n            if (Type.exists(e.subs) && Type.exists(e.subs[v])) {\n                // a subelement it is, good sir.\n                e = e.subs;\n            } else if (Type.exists(e.methodMap[v])) {\n                // the user wants to call a method\n                v = e.methodMap[v];\n            } else {\n                // the user wants to change an attribute\n                e = e.visProp;\n                v = v.toLowerCase();\n            }\n        }\n\n        if (Type.isFunction(e)) {\n            this._error('Accessing function properties is not allowed.');\n        }\n\n        if (!Type.exists(e)) {\n            this._error(e + ' is not an object');\n        }\n\n        if (!Type.exists(e[v])) {\n            this._error('unknown property ' + v);\n        }\n\n        if (compile && typeof e[v] === 'function') {\n            return function () { return e[v].apply(e, arguments); };\n        }\n\n        return e[v];\n    },\n\n    /**\n     * Type inspection: check if the string vname appears as function name in the\n     * AST node. Used in \"op_execfun\". This allows the JessieCode examples below.\n     *\n     * @private\n     * @param {String} vname\n     * @param {Object} node\n     * @returns 'any' or 'function'\n     * @see JXG.JessieCode#execute\n     * @see JXG.JessieCode#getvar\n     *\n     * @example\n     *  var p = board.create('point', [2, 0], {name: 'X'});\n     *  var txt = 'X(X)';\n     *  console.log(board.jc.parse(txt));\n     *\n     * @example\n     *  var p = board.create('point', [2, 0], {name: 'X'});\n     *  var txt = 'f = function(el, X) { return X(el); }; f(X, X);';\n     *  console.log(board.jc.parse(txt));\n     *\n     * @example\n     *  var p = board.create('point', [2, 0], {name: 'point'});\n     *  var txt = 'B = point(1,3); X(point);';\n     *  console.log(board.jc.parse(txt));\n     *\n     * @example\n     *  var p = board.create('point', [2, 0], {name: 'A'});\n     *  var q = board.create('point', [-2, 0], {name: 'X'});\n     *  var txt = 'getCoord=function(p, f){ return f(p); }; getCoord(A, X);';\n     *  console.log(board.jc.parse(txt));\n     */\n    resolveType: function (vname, node) {\n        var i, t,\n            type = 'any'; // Possible values: 'function', 'any'\n\n        if (Type.isArray(node)) {\n            // node contains the parameters of a function call or function declaration\n            for (i = 0; i < node.length; i++) {\n                t = this.resolveType(vname, node[i]);\n                if (t !== 'any') {\n                    type = t;\n                    return type;\n                }\n            }\n        }\n\n        if (node.type === 'node_op' && node.value === 'op_execfun' &&\n            node.children[0].type === 'node_var' && node.children[0].value === vname) {\n            return 'function';\n        }\n\n        if (node.type === 'node_op') {\n            for (i = 0; i < node.children.length; i++) {\n                if (node.children[0].type === 'node_var' && node.children[0].value === vname &&\n                    (node.value === 'op_add' || node.value === 'op_sub' || node.value === 'op_mul' ||\n                        node.value === 'op_div' || node.value === 'op_mod' || node.value === 'op_exp' ||\n                        node.value === 'op_neg')) {\n                    return 'any';\n                }\n            }\n\n            for (i = 0; i < node.children.length; i++) {\n                t = this.resolveType(vname, node.children[i]);\n                if (t !== 'any') {\n                    type = t;\n                    return type;\n                }\n            }\n        }\n\n        return 'any';\n    },\n\n    /**\n     * Resolves the lefthand side of an assignment operation\n     * @param node\n     * @returns {Object} An object with two properties. <strong>o</strong> which contains the object, and\n     * a string <strong>what</strong> which contains the property name.\n     */\n    getLHS: function (node) {\n        var res;\n\n        if (node.type === 'node_var') {\n            res = {\n                o: this.scope.locals,\n                what: node.value\n            };\n        } else if (node.type === 'node_op' && node.value === 'op_property') {\n            res = {\n                o: this.execute(node.children[0]),\n                what: node.children[1]\n            };\n        } else if (node.type === 'node_op' && node.value === 'op_extvalue') {\n            res = {\n                o: this.execute(node.children[0]),\n                what: this.execute(node.children[1])\n            };\n        } else {\n            throw new Error('Syntax error: Invalid left-hand side of assignment.');\n        }\n\n        return res;\n    },\n\n    getLHSCompiler: function (node, js) {\n        var res;\n\n        if (node.type === 'node_var') {\n            res = node.value;\n        } else if (node.type === 'node_op' && node.value === 'op_property') {\n            res = [\n                this.compile(node.children[0], js),\n                \"'\" + node.children[1] + \"'\"\n            ];\n        } else if (node.type === 'node_op' && node.value === 'op_extvalue') {\n            res = [\n                this.compile(node.children[0], js),\n                node.children[1].type === 'node_const' ? node.children[1].value : this.compile(node.children[1], js)\n            ];\n        } else {\n            throw new Error('Syntax error: Invalid left-hand side of assignment.');\n        }\n\n        return res;\n    },\n\n    /**\n     * Executes a parse subtree.\n     * @param {Object} node\n     * @returns {Number|String|Object|Boolean} Something\n     * @private\n     */\n    execute: function (node) {\n        var ret, v, i, e, l, undef, list, ilist,\n            parents = [],\n            // exec fun\n            fun, attr, sc;\n\n        ret = 0;\n\n        if (!node) {\n            return ret;\n        }\n\n        this.line = node.line;\n        this.col = node.col;\n\n        switch (node.type) {\n            case 'node_op':\n                switch (node.value) {\n                    case 'op_none':\n                        if (node.children[0]) {\n                            this.execute(node.children[0]);\n                        }\n                        if (node.children[1]) {\n                            ret = this.execute(node.children[1]);\n                        }\n                        break;\n                    case 'op_assign':\n                        v = this.getLHS(node.children[0]);\n                        this.lhs[this.scope.id] = v.what;\n\n                        if (v.o.type && v.o.elementClass && v.o.methodMap && v.what === 'label') {\n                            this._error('Left-hand side of assignment is read-only.');\n                        }\n\n                        ret = this.execute(node.children[1]);\n                        if (v.o !== this.scope.locals || (Type.isArray(v.o) && typeof v.what === 'number')) {\n                            // it is either an array component being set or a property of an object.\n                            this.setProp(v.o, v.what, ret);\n                        } else {\n                            // this is just a local variable inside JessieCode\n                            this.letvar(v.what, ret);\n                        }\n                        this.lhs[this.scope.id] = 0;\n                        break;\n                    case 'op_if':\n                        if (this.execute(node.children[0])) {\n                            ret = this.execute(node.children[1]);\n                        }\n                        break;\n                    case 'op_conditional':\n                    // fall through\n                    case 'op_if_else':\n                        if (this.execute(node.children[0])) {\n                            ret = this.execute(node.children[1]);\n                        } else {\n                            ret = this.execute(node.children[2]);\n                        }\n                        break;\n                    case 'op_while':\n                        while (this.execute(node.children[0])) {\n                            this.execute(node.children[1]);\n                        }\n                        break;\n                    case 'op_do':\n                        do {\n                            this.execute(node.children[0]);\n                        } while (this.execute(node.children[1]));\n                        break;\n                    case 'op_for':\n                        for (this.execute(node.children[0]); this.execute(node.children[1]); this.execute(node.children[2])) {\n                            this.execute(node.children[3]);\n                        }\n                        break;\n                    case 'op_proplst':\n                        if (node.children[0]) {\n                            this.execute(node.children[0]);\n                        }\n                        if (node.children[1]) {\n                            this.execute(node.children[1]);\n                        }\n                        break;\n                    case 'op_emptyobject':\n                        ret = {};\n                        break;\n                    case 'op_proplst_val':\n                        this.propstack.push({});\n                        this.propscope++;\n\n                        this.execute(node.children[0]);\n                        ret = this.propstack[this.propscope];\n\n                        this.propstack.pop();\n                        this.propscope--;\n                        break;\n                    case 'op_prop':\n                        // child 0: Identifier\n                        // child 1: Value\n                        this.propstack[this.propscope][node.children[0]] = this.execute(node.children[1]);\n                        break;\n                    case 'op_array':\n                        ret = [];\n                        l = node.children[0].length;\n\n                        for (i = 0; i < l; i++) {\n                            ret.push(this.execute(node.children[0][i]));\n                        }\n\n                        break;\n                    case 'op_extvalue':\n                        ret = this.execute(node.children[0]);\n                        i = this.execute(node.children[1]);\n\n                        if (typeof i === 'number' && Math.abs(Math.round(i) - i) < Mat.eps) {\n                            ret = ret[i];\n                        } else {\n                            ret = undef;\n                        }\n                        break;\n                    case 'op_return':\n                        if (this.scope === 0) {\n                            this._error('Unexpected return.');\n                        } else {\n                            return this.execute(node.children[0]);\n                        }\n                        break;\n                    case 'op_map':\n                        if (!node.children[1].isMath && node.children[1].type !== 'node_var') {\n                            this._error('execute: In a map only function calls and mathematical expressions are allowed.');\n                        }\n\n                        /** @ignore */\n                        fun = this.defineFunction(node);\n                        fun.isMap = true;\n\n                        ret = fun;\n                        break;\n                    case 'op_function':\n                        // parse the parameter list\n                        // after this, the parameters are in pstack\n\n                        /** @ignore */\n                        fun = this.defineFunction(node);\n                        fun.isMap = false;\n\n                        ret = fun;\n                        break;\n                    case 'op_execfun':\n                        // node.children:\n                        //   [0]: Name of the function\n                        //   [1]: Parameter list as a parse subtree\n                        //   [2]: Properties, only used in case of a create function\n                        this.dpstack.push([]);\n                        this.pscope++;\n\n                        // parameter parsing is done below\n                        list = node.children[1];\n\n                        // parse the properties only if given\n                        if (Type.exists(node.children[2])) {\n                            if (node.children[3]) {\n                                ilist = node.children[2];\n                                attr = {};\n\n                                for (i = 0; i < ilist.length; i++) {\n                                    attr = Type.deepCopy(attr, this.execute(ilist[i]), true);\n                                }\n                            } else {\n                                attr = this.execute(node.children[2]);\n                            }\n                        }\n\n                        // look up the variables name in the variable table\n                        node.children[0]._isFunctionName = true;\n                        fun = this.execute(node.children[0]);\n                        delete node.children[0]._isFunctionName;\n\n                        // determine the scope the function wants to run in\n                        if (Type.exists(fun) && Type.exists(fun.sc)) {\n                            sc = fun.sc;\n                        } else {\n                            sc = this;\n                        }\n\n                        if (!fun.creator && Type.exists(node.children[2])) {\n                            this._error('Unexpected value. Only element creators are allowed to have a value after the function call.');\n                        }\n\n                        // interpret ALL the parameters\n                        for (i = 0; i < list.length; i++) {\n                            if (Type.exists(fun.scope) && Type.exists(fun.scope.argtypes) && fun.scope.argtypes[i] === 'function') {\n                                // Type inspection\n                                list[i]._isFunctionName = true;\n                                parents[i] = this.execute(list[i]);\n                                delete list[i]._isFunctionName;\n                            } else {\n                                parents[i] = this.execute(list[i]);\n                            }\n                            //parents[i] = Type.evalSlider(this.execute(list[i]));\n                            this.dpstack[this.pscope].push({\n                                line: node.children[1][i].line,\n                                // SketchBin currently works only if the last column of the\n                                // parent position is taken. This is due to how I patched JS/CC\n                                // to count the lines and columns. So, ecol will do for now\n                                col: node.children[1][i].ecol\n                            });\n                        }\n\n                        // check for the function in the variable table\n                        if (typeof fun === 'function' && !fun.creator) {\n                            ret = fun.apply(sc, parents);\n                        } else if (typeof fun === 'function' && !!fun.creator) {\n                            e = this.line;\n\n                            // creator methods are the only ones that take properties, hence this special case\n                            try {\n                                ret = fun(parents, attr);\n                                ret.jcLineStart = e;\n                                ret.jcLineEnd = node.eline;\n\n                                for (i = e; i <= node.line; i++) {\n                                    this.lineToElement[i] = ret;\n                                }\n\n                                ret.debugParents = this.dpstack[this.pscope];\n                            } catch (ex) {\n                                this._error(ex.toString());\n                            }\n                        } else {\n                            this._error('Function \\'' + fun + '\\' is undefined.');\n                        }\n\n                        // clear parameter stack\n                        this.dpstack.pop();\n                        this.pscope--;\n                        break;\n                    case 'op_property':\n                        e = this.execute(node.children[0]);\n                        v = node.children[1];\n\n                        ret = this.resolveProperty(e, v, false);\n\n                        // set the scope, in case this is a method the user wants to call\n                        if (Type.exists(ret) && ['number', 'string', 'boolean'].indexOf(typeof ret) < 0) {\n                            ret.sc = e;\n                        }\n\n                        break;\n                    case 'op_use':\n                        this._warn('Use of the \\'use\\' operator is deprecated.');\n                        this.use(node.children[0].toString());\n                        break;\n                    case 'op_delete':\n                        this._warn('Use of the \\'delete\\' operator is deprecated. Please use the remove() function.');\n                        v = this.getvar(node.children[0]);\n                        ret = this.del(v);\n                        break;\n                    case 'op_eq':\n                        // == is intentional\n                        /*jslint eqeq:true*/\n                        /* eslint-disable eqeqeq */\n                        ret = this.execute(node.children[0]) == this.execute(node.children[1]);\n                        /*jslint eqeq:false*/\n                        /* eslint-enable eqeqeq */\n                        break;\n                    case 'op_neq':\n                        // != is intentional\n                        /*jslint eqeq:true*/\n                        /* eslint-disable eqeqeq */\n                        ret = this.execute(node.children[0]) != this.execute(node.children[1]);\n                        /*jslint eqeq:true*/\n                        /* eslint-enable eqeqeq */\n                        break;\n                    case 'op_approx':\n                        ret = Math.abs(this.execute(node.children[0]) - this.execute(node.children[1])) < Mat.eps;\n                        break;\n                    case 'op_gt':\n                        ret = this.execute(node.children[0]) > this.execute(node.children[1]);\n                        break;\n                    case 'op_lt':\n                        ret = this.execute(node.children[0]) < this.execute(node.children[1]);\n                        break;\n                    case 'op_geq':\n                        ret = this.execute(node.children[0]) >= this.execute(node.children[1]);\n                        break;\n                    case 'op_leq':\n                        ret = this.execute(node.children[0]) <= this.execute(node.children[1]);\n                        break;\n                    case 'op_or':\n                        ret = this.execute(node.children[0]) || this.execute(node.children[1]);\n                        break;\n                    case 'op_and':\n                        ret = this.execute(node.children[0]) && this.execute(node.children[1]);\n                        break;\n                    case 'op_not':\n                        ret = !this.execute(node.children[0]);\n                        break;\n                    case 'op_add':\n                        ret = this.add(this.execute(node.children[0]), this.execute(node.children[1]));\n                        break;\n                    case 'op_sub':\n                        ret = this.sub(this.execute(node.children[0]), this.execute(node.children[1]));\n                        break;\n                    case 'op_div':\n                        ret = this.div(this.execute(node.children[0]), this.execute(node.children[1]));\n                        break;\n                    case 'op_mod':\n                        // use mathematical modulo, JavaScript implements the symmetric modulo.\n                        ret = this.mod(this.execute(node.children[0]), this.execute(node.children[1]), true);\n                        break;\n                    case 'op_mul':\n                        ret = this.mul(this.execute(node.children[0]), this.execute(node.children[1]));\n                        break;\n                    case 'op_exp':\n                        ret = this.pow(this.execute(node.children[0]), this.execute(node.children[1]));\n                        break;\n                    case 'op_neg':\n                        ret = this.neg(this.execute(node.children[0]));\n                        break;\n                }\n                break;\n\n            case 'node_var':\n                // node._isFunctionName is set in execute: at op_execfun.\n                ret = this.getvar(node.value, false, node._isFunctionName);\n                break;\n\n            case 'node_const':\n                if (node.value === null) {\n                    ret = null;\n                } else {\n                    ret = Number(node.value);\n                }\n                break;\n\n            case 'node_const_bool':\n                ret = node.value;\n                break;\n\n            case 'node_str':\n                //ret = node.value.replace(/\\\\'/, \"'\").replace(/\\\\\"/, '\"').replace(/\\\\\\\\/, '\\\\');\n                /*jslint regexp:true*/\n                ret = node.value.replace(/\\\\(.)/g, '$1'); // Remove backslash, important in JessieCode tags\n                /*jslint regexp:false*/\n                break;\n        }\n\n        return ret;\n    },\n\n    /**\n     * Compiles a parse tree back to JessieCode.\n     * @param {Object} node\n     * @param {Boolean} [js=false] Compile either to JavaScript or back to JessieCode (required for the UI).\n     * @returns Something\n     * @private\n     */\n    compile: function (node, js) {\n        var e, i, list, scope,\n            ret = '';\n\n        if (!Type.exists(js)) {\n            js = false;\n        }\n\n        if (!node) {\n            return ret;\n        }\n\n        switch (node.type) {\n            case 'node_op':\n                switch (node.value) {\n                    case 'op_none':\n                        if (node.children[0]) {\n                            ret = this.compile(node.children[0], js);\n                        }\n                        if (node.children[1]) {\n                            ret += this.compile(node.children[1], js);\n                        }\n                        break;\n                    case 'op_assign':\n                        //e = this.compile(node.children[0], js);\n                        if (js) {\n                            e = this.getLHSCompiler(node.children[0], js);\n                            if (Type.isArray(e)) {\n                                ret = '$jc$.setProp(' + e[0] + ', ' + e[1] + ', ' + this.compile(node.children[1], js) + ');\\n';\n                            } else {\n                                if (this.isLocalVariable(e) !== this.scope) {\n                                    this.scope.locals[e] = true;\n                                }\n                                ret = '$jc$.scopes[' + this.scope.id + '].locals[\\'' + e + '\\'] = ' + this.compile(node.children[1], js) + ';\\n';\n                            }\n                        } else {\n                            e = this.compile(node.children[0]);\n                            ret = e + ' = ' + this.compile(node.children[1], js) + ';\\n';\n                        }\n                        break;\n                    case 'op_if':\n                        ret = ' if (' + this.compile(node.children[0], js) + ') ' + this.compile(node.children[1], js);\n                        break;\n                    case 'op_if_else':\n                        ret = ' if (' + this.compile(node.children[0], js) + ')' + this.compile(node.children[1], js);\n                        ret += ' else ' + this.compile(node.children[2], js);\n                        break;\n                    case 'op_conditional':\n                        ret = '((' + this.compile(node.children[0], js) + ')?(' + this.compile(node.children[1], js);\n                        ret += '):(' + this.compile(node.children[2], js) + '))';\n                        break;\n                    case 'op_while':\n                        ret = ' while (' + this.compile(node.children[0], js) + ') {\\n' + this.compile(node.children[1], js) + '}\\n';\n                        break;\n                    case 'op_do':\n                        ret = ' do {\\n' + this.compile(node.children[0], js) + '} while (' + this.compile(node.children[1], js) + ');\\n';\n                        break;\n                    case 'op_for':\n                        //ret = ' for (' + this.compile(node.children[0], js) + '; ' + this.compile(node.children[1], js) + '; ' + this.compile(node.children[2], js) + ') {\\n' + this.compile(node.children[3], js) + '\\n}\\n';\n                        ret = ' for (' + this.compile(node.children[0], js) +               // Assignment ends with \";\"\n                            this.compile(node.children[1], js) + '; ' +         // Logical test comes without \";\"\n                            this.compile(node.children[2], js).slice(0, -2) +   // Counting comes with \";\" which has to be removed\n                            ') {\\n' + this.compile(node.children[3], js) + '\\n}\\n';\n                        break;\n                    case 'op_proplst':\n                        if (node.children[0]) {\n                            ret = this.compile(node.children[0], js) + ', ';\n                        }\n\n                        ret += this.compile(node.children[1], js);\n                        break;\n                    case 'op_prop':\n                        // child 0: Identifier\n                        // child 1: Value\n                        ret = node.children[0] + ': ' + this.compile(node.children[1], js);\n                        break;\n                    case 'op_emptyobject':\n                        ret = js ? '{}' : '<< >>';\n                        break;\n                    case 'op_proplst_val':\n                        ret = this.compile(node.children[0], js);\n                        break;\n                    case 'op_array':\n                        list = [];\n                        for (i = 0; i < node.children[0].length; i++) {\n                            list.push(this.compile(node.children[0][i], js));\n                        }\n                        ret = '[' + list.join(', ') + ']';\n                        break;\n                    case 'op_extvalue':\n                        ret = this.compile(node.children[0], js) + '[' + this.compile(node.children[1], js) + ']';\n                        break;\n                    case 'op_return':\n                        ret = ' return ' + this.compile(node.children[0], js) + ';\\n';\n                        break;\n                    case 'op_map':\n                        if (!node.children[1].isMath && node.children[1].type !== 'node_var') {\n                            this._error('compile: In a map only function calls and mathematical expressions are allowed.');\n                        }\n\n                        list = node.children[0];\n                        if (js) {\n                            ret = ' $jc$.makeMap(function (' + list.join(', ') + ') { return ' + this.compile(node.children[1], js) + '; })';\n                        } else {\n                            ret = 'map (' + list.join(', ') + ') -> ' + this.compile(node.children[1], js);\n                        }\n\n                        break;\n                    case 'op_function':\n                        list = node.children[0];\n                        scope = this.pushScope(list);\n                        if (js) {\n                            ret = this.functionCodeJS(node);\n                        } else {\n                            ret = ' function (' + list.join(', ') + ') ' + this.compile(node.children[1], js);\n                        }\n                        this.popScope();\n                        break;\n                    case 'op_execfunmath':\n                        console.log('op_execfunmath: TODO');\n                        ret = '-1';\n                        break;\n                    case 'op_execfun':\n                        // parse the properties only if given\n                        if (node.children[2]) {\n                            list = [];\n                            for (i = 0; i < node.children[2].length; i++) {\n                                list.push(this.compile(node.children[2][i], js));\n                            }\n\n                            if (js) {\n                                e = '$jc$.mergeAttributes(' + list.join(', ') + ')';\n                            } else {\n                                e = list.join(', ');\n                            }\n                        }\n                        node.children[0].withProps = !!node.children[2];\n                        list = [];\n                        for (i = 0; i < node.children[1].length; i++) {\n                            list.push(this.compile(node.children[1][i], js));\n                        }\n                        ret = this.compile(node.children[0], js) + '(' + list.join(', ') + (node.children[2] && js ? ', ' + e : '') + ')' + (node.children[2] && !js ? ' ' + e : '');\n                        if (js) {\n                            // Inserting a newline here allows simultaneously\n                            // - procedural calls like Q.moveTo(...); and\n                            // - function calls in expressions like log(x) + 1;\n                            // Problem: procedural calls will not be ended by a semicolon.\n                            ret += '\\n';\n                        }\n\n                        // save us a function call when compiled to javascript\n                        if (js && node.children[0].value === '$') {\n                            ret = '$jc$.board.objects[' + this.compile(node.children[1][0], js) + ']';\n                        }\n                        break;\n                    case 'op_property':\n                        if (js && node.children[1] !== 'X' && node.children[1] !== 'Y') {\n                            ret = '$jc$.resolveProperty(' + this.compile(node.children[0], js) + ', \\'' + node.children[1] + '\\', true)';\n                        } else {\n                            ret = this.compile(node.children[0], js) + '.' + node.children[1];\n                        }\n                        break;\n                    case 'op_use':\n                        this._warn('Use of the \\'use\\' operator is deprecated.');\n                        if (js) {\n                            ret = '$jc$.use(\\'';\n                        } else {\n                            ret = 'use(\\'';\n                        }\n\n                        ret += node.children[0].toString() + '\\');';\n                        break;\n                    case 'op_delete':\n                        this._warn('Use of the \\'delete\\' operator is deprecated. Please use the remove() function.');\n                        if (js) {\n                            ret = '$jc$.del(';\n                        } else {\n                            ret = 'remove(';\n                        }\n\n                        ret += this.compile(node.children[0], js) + ')';\n                        break;\n                    case 'op_eq':\n                        ret = '(' + this.compile(node.children[0], js) + ' === ' + this.compile(node.children[1], js) + ')';\n                        break;\n                    case 'op_neq':\n                        ret = '(' + this.compile(node.children[0], js) + ' !== ' + this.compile(node.children[1], js) + ')';\n                        break;\n                    case 'op_approx':\n                        ret = '(' + this.compile(node.children[0], js) + ' ~= ' + this.compile(node.children[1], js) + ')';\n                        break;\n                    case 'op_gt':\n                        if (js) {\n                            ret = '$jc$.gt(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ')';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + ' > ' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_lt':\n                        if (js) {\n                            ret = '$jc$.lt(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ')';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + ' < ' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_geq':\n                        if (js) {\n                            ret = '$jc$.geq(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ')';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + ' >= ' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_leq':\n                        if (js) {\n                            ret = '$jc$.leq(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ')';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + ' <= ' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_or':\n                        ret = '(' + this.compile(node.children[0], js) + ' || ' + this.compile(node.children[1], js) + ')';\n                        break;\n                    case 'op_and':\n                        ret = '(' + this.compile(node.children[0], js) + ' && ' + this.compile(node.children[1], js) + ')';\n                        break;\n                    case 'op_not':\n                        ret = '!(' + this.compile(node.children[0], js) + ')';\n                        break;\n                    case 'op_add':\n                        if (js) {\n                            ret = '$jc$.add(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ')';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + ' + ' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_sub':\n                        if (js) {\n                            ret = '$jc$.sub(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ')';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + ' - ' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_div':\n                        if (js) {\n                            ret = '$jc$.div(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ')';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + ' / ' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_mod':\n                        if (js) {\n                            ret = '$jc$.mod(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ', true)';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + ' % ' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_mul':\n                        if (js) {\n                            ret = '$jc$.mul(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ')';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + ' * ' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_exp':\n                        if (js) {\n                            ret = '$jc$.pow(' + this.compile(node.children[0], js) + ', ' + this.compile(node.children[1], js) + ')';\n                        } else {\n                            ret = '(' + this.compile(node.children[0], js) + '^' + this.compile(node.children[1], js) + ')';\n                        }\n                        break;\n                    case 'op_neg':\n                        if (js) {\n                            ret = '$jc$.neg(' + this.compile(node.children[0], js) + ')';\n                        } else {\n                            ret = '(-' + this.compile(node.children[0], js) + ')';\n                        }\n                        break;\n                }\n                break;\n\n            case 'node_var':\n                if (js) {\n                    ret = this.getvarJS(node.value, false, node.withProps);\n                } else {\n                    ret = node.value;\n                }\n                break;\n\n            case 'node_const':\n                ret = node.value;\n                break;\n\n            case 'node_const_bool':\n                ret = node.value;\n                break;\n\n            case 'node_str':\n                ret = '\\'' + node.value + '\\'';\n                break;\n        }\n\n        if (node.needsBrackets) {\n            ret = '{\\n' + ret + ' }\\n';\n        }\n        if (node.needsAngleBrackets) {\n            if (js) {\n                ret = '{\\n' + ret + ' }\\n';\n            } else {\n                ret = '<< ' + ret + ' >>\\n';\n            }\n        }\n\n        return ret;\n    },\n\n    /**\n     * This is used as the global getName() function.\n     * @param {JXG.GeometryElement} obj\n     * @param {Boolean} useId\n     * @returns {String}\n     */\n    getName: function (obj, useId) {\n        var name = '';\n\n        if (Type.exists(obj) && Type.exists(obj.getName)) {\n            name = obj.getName();\n            if ((!Type.exists(name) || name === '') && useId) {\n                name = obj.id;\n            }\n        } else if (useId) {\n            name = obj.id;\n        }\n\n        return name;\n    },\n\n    /**\n     * This is used as the global X() function.\n     * @param {JXG.Point|JXG.Text} e\n     * @returns {Number}\n     */\n    X: function (e) {\n        return e.X();\n    },\n\n    /**\n     * This is used as the global Y() function.\n     * @param {JXG.Point|JXG.Text} e\n     * @returns {Number}\n     */\n    Y: function (e) {\n        return e.Y();\n    },\n\n    /**\n     * This is used as the global V() function.\n     * @param {Glider|Slider} e\n     * @returns {Number}\n     */\n    V: function (e) {\n        return e.Value();\n    },\n\n    /**\n     * This is used as the global L() function.\n     * @param {JXG.Line} e\n     * @returns {Number}\n     */\n    L: function (e) {\n        return e.L();\n    },\n\n    /**\n     * This is used as the global area() function.\n     * @param {JXG.Circle|JXG.Polygon} obj\n     * @returns {Number}\n     */\n    area: function (obj) {\n        if (!Type.exists(obj) || !Type.exists(obj.Area)) {\n            this._error('Error: Can\\'t calculate area.');\n        }\n\n        return obj.Area();\n    },\n\n    /**\n     * This is used as the global perimeter() function.\n     * @param {JXG.Circle|JXG.Polygon} obj\n     * @returns {Number}\n     */\n    perimeter: function (obj) {\n        if (!Type.exists(obj) || !Type.exists(obj.Perimeter)) {\n            this._error('Error: Can\\'t calculate perimeter.');\n        }\n\n        return obj.Perimeter();\n    },\n\n    /**\n     * This is used as the global dist() function.\n     * @param {JXG.Point} p1\n     * @param {JXG.Point} p2\n     * @returns {Number}\n     */\n    dist: function (p1, p2) {\n        if (!Type.exists(p1) || !Type.exists(p1.Dist)) {\n            this._error('Error: Can\\'t calculate distance.');\n        }\n\n        return p1.Dist(p2);\n    },\n\n    /**\n     * This is used as the global radius() function.\n     * @param {JXG.Circle|Sector} obj\n     * @returns {Number}\n     */\n    radius: function (obj) {\n        if (!Type.exists(obj) || !Type.exists(obj.Radius)) {\n            this._error('Error: Can\\'t calculate radius.');\n        }\n\n        return obj.Radius();\n    },\n\n    /**\n     * This is used as the global slope() function.\n     * @param {JXG.Line} obj\n     * @returns {Number}\n     */\n    slope: function (obj) {\n        if (!Type.exists(obj) || !Type.exists(obj.Slope)) {\n            this._error('Error: Can\\'t calculate slope.');\n        }\n\n        return obj.Slope();\n    },\n\n    /**\n     * + operator implementation\n     * @param {Number|Array|JXG.Point} a\n     * @param {Number|Array|JXG.Point} b\n     * @returns {Number|Array}\n     */\n    add: function (a, b) {\n        var i, len, res;\n\n        a = Type.evalSlider(a);\n        b = Type.evalSlider(b);\n\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            res = Interval.add(a, b);\n        } else if (Type.isArray(a) && Type.isArray(b)) {\n            len = Math.min(a.length, b.length);\n            res = [];\n\n            for (i = 0; i < len; i++) {\n                res[i] = a[i] + b[i];\n            }\n        } else if (Type.isNumber(a) && Type.isNumber(b)) {\n            res = a + b;\n        } else if (Type.isString(a) || Type.isString(b)) {\n            res = a.toString() + b.toString();\n        } else {\n            this._error('Operation + not defined on operands ' + typeof a + ' and ' + typeof b);\n        }\n\n        return res;\n    },\n\n    /**\n     * - operator implementation\n     * @param {Number|Array|JXG.Point} a\n     * @param {Number|Array|JXG.Point} b\n     * @returns {Number|Array}\n     */\n    sub: function (a, b) {\n        var i, len, res;\n\n        a = Type.evalSlider(a);\n        b = Type.evalSlider(b);\n\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            res = Interval.sub(a, b);\n        } else if (Type.isArray(a) && Type.isArray(b)) {\n            len = Math.min(a.length, b.length);\n            res = [];\n\n            for (i = 0; i < len; i++) {\n                res[i] = a[i] - b[i];\n            }\n        } else if (Type.isNumber(a) && Type.isNumber(b)) {\n            res = a - b;\n        } else {\n            this._error('Operation - not defined on operands ' + typeof a + ' and ' + typeof b);\n        }\n\n        return res;\n    },\n\n    /**\n     * unary - operator implementation\n     * @param {Number|Array|JXG.Point} a\n     * @returns {Number|Array}\n     */\n    neg: function (a) {\n        var i, len, res;\n\n        a = Type.evalSlider(a);\n\n        if (Interval.isInterval(a)) {\n            res = Interval.negative(a);\n        } else if (Type.isArray(a)) {\n            len = a.length;\n            res = [];\n\n            for (i = 0; i < len; i++) {\n                res[i] = -a[i];\n            }\n        } else if (Type.isNumber(a)) {\n            res = -a;\n        } else {\n            this._error('Unary operation - not defined on operand ' + typeof a);\n        }\n\n        return res;\n    },\n\n    /**\n     * Multiplication of vectors and numbers\n     * @param {Number|Array} a\n     * @param {Number|Array} b\n     * @returns {Number|Array} (Inner) product of the given input values.\n     */\n    mul: function (a, b) {\n        var i, len, res;\n\n        a = Type.evalSlider(a);\n        b = Type.evalSlider(b);\n\n        if (Type.isArray(a) && Type.isNumber(b)) {\n            // swap b and a\n            i = a;\n            a = b;\n            b = a;\n        }\n\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            res = Interval.mul(a, b);\n        } else if (Type.isArray(a) && Type.isArray(b)) {\n            len = Math.min(a.length, b.length);\n            res = Mat.innerProduct(a, b, len);\n        } else if (Type.isNumber(a) && Type.isArray(b)) {\n            len = b.length;\n            res = [];\n\n            for (i = 0; i < len; i++) {\n                res[i] = a * b[i];\n            }\n        } else if (Type.isNumber(a) && Type.isNumber(b)) {\n            res = a * b;\n        } else {\n            this._error('Operation * not defined on operands ' + typeof a + ' and ' + typeof b);\n        }\n\n        return res;\n    },\n\n    /**\n     * Implementation of the / operator.\n     * @param {Number|Array} a\n     * @param {Number} b\n     * @returns {Number|Array}\n     */\n    div: function (a, b) {\n        var i, len, res;\n\n        a = Type.evalSlider(a);\n        b = Type.evalSlider(b);\n\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            res = Interval.div(a, b);\n        } else if (Type.isArray(a) && Type.isNumber(b)) {\n            len = a.length;\n            res = [];\n\n            for (i = 0; i < len; i++) {\n                res[i] = a[i] / b;\n            }\n        } else if (Type.isNumber(a) && Type.isNumber(b)) {\n            res = a / b;\n        } else {\n            this._error('Operation * not defined on operands ' + typeof a + ' and ' + typeof b);\n        }\n\n        return res;\n    },\n\n    /**\n     * Implementation of the % operator.\n     * @param {Number|Array} a\n     * @param {Number} b\n     * @returns {Number|Array}\n     */\n    mod: function (a, b) {\n        var i, len, res;\n\n        a = Type.evalSlider(a);\n        b = Type.evalSlider(b);\n\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            return Interval.fmod(a, b);\n        } else if (Type.isArray(a) && Type.isNumber(b)) {\n            len = a.length;\n            res = [];\n\n            for (i = 0; i < len; i++) {\n                res[i] = Mat.mod(a[i], b, true);\n            }\n        } else if (Type.isNumber(a) && Type.isNumber(b)) {\n            res = Mat.mod(a, b, true);\n        } else {\n            this._error('Operation * not defined on operands ' + typeof a + ' and ' + typeof b);\n        }\n\n        return res;\n    },\n\n    /**\n     * Pow function wrapper to allow direct usage of sliders.\n     * @param {Number|Slider} a\n     * @param {Number|Slider} b\n     * @returns {Number}\n     */\n    pow: function (a, b) {\n        a = Type.evalSlider(a);\n        b = Type.evalSlider(b);\n\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            return Interval.pow(a, b);\n        }\n        return Mat.pow(a, b);\n    },\n\n    lt: function (a, b) {\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            return Interval.lt(a, b);\n        }\n        return a < b;\n    },\n    leq: function (a, b) {\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            return Interval.leq(a, b);\n        }\n        return a <= b;\n    },\n    gt: function (a, b) {\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            return Interval.gt(a, b);\n        }\n        return a > b;\n    },\n    geq: function (a, b) {\n        if (Interval.isInterval(a) || Interval.isInterval(b)) {\n            return Interval.geq(a, b);\n        }\n        return a >= b;\n    },\n\n    randint: function (min, max, step) {\n        if (!Type.exists(step)) {\n            step = 1;\n        }\n        return Math.round(Math.random() * (max - min) / step) * step + min;\n    },\n\n    DDD: function (f) {\n        console.log('Dummy derivative function. This should never appear!');\n    },\n\n    /**\n     * Implementation of the ?: operator\n     * @param {Boolean} cond Condition\n     * @param {*} v1\n     * @param {*} v2\n     * @returns {*} Either v1 or v2.\n     */\n    ifthen: function (cond, v1, v2) {\n        if (cond) {\n            return v1;\n        }\n\n        return v2;\n    },\n\n    /**\n     * Implementation of the delete() builtin function\n     * @param {JXG.GeometryElement} element\n     */\n    del: function (element) {\n        if (typeof element === 'object' && JXG.exists(element.type) && JXG.exists(element.elementClass)) {\n            this.board.removeObject(element);\n        }\n    },\n\n    /**\n     * Implementation of the eval() builtin function. Calls JXG.evaluate().\n     * @param {String|Number|Function} v\n     */\n    eval: function (v) {\n        return JXG.evaluate(v);\n    },\n\n    /**\n     * Implementation of the use() builtin function\n     * @param {String} board\n     */\n    use: function (board) {\n        var b, ref,\n            found = false;\n\n        if (typeof board === 'string') {\n            // search all the boards for the one with the appropriate container div\n            for (b in JXG.boards) {\n                if (JXG.boards.hasOwnProperty(b) && JXG.boards[b].container === board) {\n                    ref = JXG.boards[b];\n                    found = true;\n                    break;\n                }\n            }\n        } else {\n            ref = board;\n            found = true;\n        }\n\n        if (found) {\n            this.board = ref;\n            this.builtIn.$board = ref;\n            this.builtIn.$board.src = '$jc$.board';\n        } else {\n            this._error('Board \\'' + board + '\\' not found!');\n        }\n    },\n\n    /**\n     * Find the first symbol to the given value from the given scope upwards.\n     * @param v Value\n     * @param {Number} [scope=-1] The scope, default is to start with current scope (-1).\n     * @returns {Array} An array containing the symbol and the scope if a symbol could be found,\n     * an empty array otherwise;\n     */\n    findSymbol: function (v, scope) {\n        var i, s;\n\n        scope = Type.def(scope, -1);\n\n        if (scope === -1) {\n            s = this.scope;\n        } else {\n            s = this.scopes[scope];\n        }\n\n        while (s !== null) {\n            for (i in s.locals) {\n                if (s.locals.hasOwnProperty(i) && s.locals[i] === v) {\n                    return [i, s];\n                }\n            }\n\n            s = s.previous;\n        }\n\n        return [];\n    },\n\n    /**\n     * Import modules into a JessieCode script.\n     * @param {String} module\n     */\n    importModule: function (module) {\n        return priv.modules[module.toLowerCase()];\n    },\n\n    /**\n     * Defines built in methods and constants.\n     * @returns {Object} BuiltIn control object\n     */\n    defineBuiltIn: function () {\n        var that = this,\n            builtIn = {\n                PI: Math.PI,\n                EULER: Math.E,\n                D: that.DDD,\n                X: that.X,\n                Y: that.Y,\n                V: that.V,\n                Value: that.V,\n                L: that.L,\n                Length: that.L,\n\n                acosh: Mat.acosh,\n                acot: Mat.acot,\n                asinh: Mat.asinh,\n                binomial: Mat.binomial,\n                cbrt: Mat.cbrt,\n                cosh: Mat.cosh,\n                cot: Mat.cot,\n                deg: Geometry.trueAngle,\n                A: that.area,\n                area: that.area,\n                Area: that.area,\n                perimeter: that.perimeter,\n                Perimeter: that.perimeter,\n                dist: that.dist,\n                Dist: that.dist,\n                R: that.radius,\n                radius: that.radius,\n                Radius: that.radius,\n                erf: Mat.erf,\n                erfc: Mat.erfc,\n                erfi: Mat.erfi,\n                factorial: Mat.factorial,\n                gcd: Mat.gcd,\n                lb: Mat.log2,\n                lcm: Mat.lcm,\n                ld: Mat.log2,\n                lg: Mat.log10,\n                ln: Math.log,\n                log: Mat.log,\n                log10: Mat.log10,\n                log2: Mat.log2,\n                ndtr: Mat.ndtr,\n                ndtri: Mat.ndtri,\n                nthroot: Mat.nthroot,\n                pow: Mat.pow,\n                rad: Geometry.rad,\n                ratpow: Mat.ratpow,\n                trunc: Type.trunc,\n                sinh: Mat.sinh,\n                slope: that.slope,\n                Slope: that.slope,\n\n                randint: that.randint,\n\n                IfThen: that.ifthen,\n                'import': that.importModule,\n                'eval': that.eval,\n                'use': that.use,\n                'remove': that.del,\n                '$': that.getElementById,\n                '$value': function(e) {return that.getElementById(e).Value(); },\n                getName: that.getName,\n                name: that.getName,\n                '$board': that.board,\n                '$log': that.log\n            };\n\n        // special scopes for factorial, deg, and rad\n        builtIn.rad.sc = Geometry;\n        builtIn.deg.sc = Geometry;\n        builtIn.factorial.sc = Mat;\n\n        // set the javascript equivalent for the builtIns\n        // some of the anonymous functions should be replaced by global methods later on\n        // EULER and PI don't get a source attribute - they will be lost anyways and apparently\n        // some browser will throw an exception when a property is assigned to a primitive value.\n        builtIn.X.src = '$jc$.X';\n        builtIn.Y.src = '$jc$.Y';\n        builtIn.V.src = '$jc$.V';\n        builtIn.Value.src = '$jc$.V';\n        builtIn.L.src = '$jc$.L';\n        builtIn.Length.src = '$jc$.L';\n\n        builtIn.acosh.src = 'JXG.Math.acosh';\n        builtIn.acot.src = 'JXG.Math.acot';\n        builtIn.asinh.src = 'JXG.Math.asinh';\n        builtIn.binomial.src = 'JXG.Math.binomial';\n        builtIn.cbrt.src = 'JXG.Math.cbrt';\n        builtIn.cot.src = 'JXG.Math.cot';\n        builtIn.cosh.src = 'JXG.Math.cosh';\n        builtIn.deg.src = 'JXG.Math.Geometry.trueAngle';\n        builtIn.erf.src = 'JXG.Math.erf';\n        builtIn.erfc.src = 'JXG.Math.erfc';\n        builtIn.erfi.src = 'JXG.Math.erfi';\n        builtIn.A.src = '$jc$.area';\n        builtIn.area.src = '$jc$.area';\n        builtIn.Area.src = '$jc$.area';\n        builtIn.perimeter.src = '$jc$.perimeter';\n        builtIn.Perimeter.src = '$jc$.perimeter';\n        builtIn.dist.src = '$jc$.dist';\n        builtIn.Dist.src = '$jc$.dist';\n        builtIn.R.src = '$jc$.radius';\n        builtIn.radius.src = '$jc$.radius';\n        builtIn.Radius.src = '$jc$.radius';\n        builtIn.factorial.src = 'JXG.Math.factorial';\n        builtIn.gcd.src = 'JXG.Math.gcd';\n        builtIn.lb.src = 'JXG.Math.log2';\n        builtIn.lcm.src = 'JXG.Math.lcm';\n        builtIn.ld.src = 'JXG.Math.log2';\n        builtIn.lg.src = 'JXG.Math.log10';\n        builtIn.ln.src = 'Math.log';\n        builtIn.log.src = 'JXG.Math.log';\n        builtIn.log10.src = 'JXG.Math.log10';\n        builtIn.log2.src = 'JXG.Math.log2';\n        builtIn.ndtr.src = 'JXG.Math.ndtr';\n        builtIn.ndtri.src = 'JXG.Math.ndtri';\n        builtIn.nthroot.src = 'JXG.Math.nthroot';\n        builtIn.pow.src = 'JXG.Math.pow';\n        builtIn.rad.src = 'JXG.Math.Geometry.rad';\n        builtIn.ratpow.src = 'JXG.Math.ratpow';\n        builtIn.trunc.src = 'JXG.trunc';\n        builtIn.sinh.src = 'JXG.Math.sinh';\n        builtIn.slope.src = '$jc$.slope';\n        builtIn.Slope.src = '$jc$.slope';\n\n        builtIn.randint.src = '$jc$.randint';\n\n        builtIn['import'].src = '$jc$.importModule';\n        builtIn.eval.src = '$jc$.eval';\n        builtIn.use.src = '$jc$.use';\n        builtIn.remove.src = '$jc$.del';\n        builtIn.IfThen.src = '$jc$.ifthen';\n        // usually unused, see node_op > op_execfun\n        builtIn.$.src = '(function (n) { return $jc$.board.select(n); })';\n        builtIn.$value.src = '(function (n) { return $jc$.board.select(n).Value(); })';\n        builtIn.getName.src = '$jc$.getName';\n        builtIn.name.src = '$jc$.getName';\n        if (builtIn.$board) {\n            builtIn.$board.src = '$jc$.board';\n        }\n        builtIn.$log.src = '$jc$.log';\n\n        builtIn = JXG.merge(builtIn, that._addedBuiltIn);\n\n        return builtIn;\n    },\n\n    _addedBuiltIn: {},\n\n    addBuiltIn: function (name, func) {\n        if (Type.exists(this.builtIn)) {\n            if (Type.exists(this.builtIn[name])) {\n                return;\n            }\n            this.builtIn[name] = func;\n            this.builtIn[name].src = '$jc$.' + name;\n        }\n\n        if (Type.exists(this._addedBuiltIn[name])) {\n            return;\n        }\n        this._addedBuiltIn[name] = func;\n        this._addedBuiltIn[name].src = '$jc$.' + name;\n\n        JXG.JessieCode.prototype[name] = func;\n    },\n\n    /**\n     * Returns information about the possible functions and constants.\n     * @returns {Object}\n     */\n    getPossibleOperands: function () {\n        var FORBIDDEN = ['E'],\n            jessiecode = this.builtIn || this.defineBuiltIn(),\n            math = Math,\n            jc, ma, merge,\n            i, j, p, len, e,\n            funcs, funcsJC, consts, operands,\n            sort, pack;\n\n        sort = function (a, b) {\n            return a.toLowerCase().localeCompare(b.toLowerCase());\n        };\n\n        pack = function (name, origin) {\n            var that = null;\n\n            if (origin === 'jc') that = jessiecode[name];\n            else if (origin === 'Math') that = math[name];\n            else return;\n\n            if (FORBIDDEN.indexOf(name) >= 0) {\n                return;\n            } else if (JXG.isFunction(that)) {\n                return {\n                    name: name,\n                    type: 'function',\n                    numParams: that.length,\n                    origin: origin,\n                };\n            } else if (JXG.isNumber(that)) {\n                return {\n                    name: name,\n                    type: 'constant',\n                    value: that,\n                    origin: origin,\n                };\n            } else if (name.startsWith('$')) {\n                // do nothing\n            } else if (that !== undefined) {\n                console.error('undefined type', that);\n            }\n        };\n\n        jc = Object.getOwnPropertyNames(jessiecode).sort(sort);\n        ma = Object.getOwnPropertyNames(math).sort(sort);\n        merge = [];\n        i = 0;\n        j = 0;\n\n        while (i < jc.length || j < ma.length) {\n            if (jc[i] === ma[j]) {\n                p = pack(ma[j], 'Math');\n                if (JXG.exists(p)) merge.push(p);\n                i++;\n                j++;\n            } else if (!JXG.exists(ma[j]) || jc[i].toLowerCase().localeCompare(ma[j].toLowerCase()) < 0) {\n                p = pack(jc[i], 'jc');\n                if (JXG.exists(p)) merge.push(p);\n                i++;\n            } else {\n                p = pack(ma[j], 'Math');\n                if (JXG.exists(p)) merge.push(p);\n                j++;\n            }\n        }\n\n        funcs = [];\n        funcsJC = [];\n        consts = [];\n        operands = {};\n        len = merge.length;\n        for (i = 0; i < len; i++) {\n            e = merge[i];\n            switch (e.type) {\n                case 'function':\n                    funcs.push(e.name);\n                    if (e.origin === 'jc')\n                        funcsJC.push(e.name);\n                    break;\n                case 'constant':\n                    consts.push(e.name);\n                    break;\n            }\n            operands[e.name] = e;\n        }\n\n        return {\n            all: operands,\n            list: merge,\n            functions: funcs,\n            functions_jessiecode: funcsJC,\n            constants: consts,\n        };\n    },\n\n    /**\n     * Output a debugging message. Uses debug console, if available. Otherwise an HTML element with the\n     * id \"debug\" and an innerHTML property is used.\n     * @param {String} log\n     * @private\n     */\n    _debug: function (log) {\n        if (typeof console === 'object') {\n            console.log(log);\n        } else if (Env.isBrowser && document && document.getElementById('debug') !== null) {\n            document.getElementById('debug').innerHTML += log + '<br />';\n        }\n    },\n\n    /**\n     * Throws an exception with the given error message.\n     * @param {String} msg Error message\n     */\n    _error: function (msg) {\n        var e = new Error('Error(' + this.line + '): ' + msg);\n        e.line = this.line;\n        throw e;\n    },\n\n    /**\n     * Output a warning message using {@link JXG#debug} and precedes the message with \"Warning: \".\n     * @param {String} msg\n     */\n    _warn: function (msg) {\n        if (typeof console === 'object') {\n            console.log('Warning(' + this.line + '): ' + msg);\n        } else if (Env.isBrowser && document && document.getElementById(this.warnLog) !== null) {\n            document.getElementById(this.warnLog).innerHTML += 'Warning(' + this.line + '): ' + msg + '<br />';\n        }\n    },\n\n    _log: function (msg) {\n        if (typeof window !== 'object' && typeof self === 'object' && self.postMessage) {\n            self.postMessage({ type: 'log', msg: 'Log: ' + msg.toString() });\n        } else {\n            console.log('Log: ', arguments);\n        }\n    }\n\n});\n\n/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\n/**\n * @class\n * @ignore\n */\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,14],$V1=[1,13],$V2=[1,37],$V3=[1,14],$V4=[1,15],$V5=[1,21],$V6=[1,16],$V7=[1,17],$V8=[1,33],$V9=[1,18],$Va=[1,19],$Vb=[1,12],$Vc=[1,59],$Vd=[1,60],$Ve=[1,58],$Vf=[1,46],$Vg=[1,48],$Vh=[1,49],$Vi=[1,50],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,45],$Vo=[1,38],$Vp=[1,39],$Vq=[5,7,8,14,15,16,17,19,20,21,23,26,27,50,51,58,65,74,75,76,77,78,79,80,82,91,93],$Vr=[5,7,8,12,14,15,16,17,19,20,21,23,26,27,50,51,58,65,74,75,76,77,78,79,80,82,91,93],$Vs=[8,10,16,32,34,35,37,39,41,42,43,45,46,47,48,50,51,53,54,55,57,64,65,66,83,86],$Vt=[2,48],$Vu=[1,72],$Vv=[10,16,32,34,35,37,39,41,42,43,45,46,47,48,50,51,53,54,55,57,66,83,86],$Vw=[1,78],$Vx=[8,10,16,32,34,35,37,41,42,43,45,46,47,48,50,51,53,54,55,57,64,65,66,83,86],$Vy=[1,82],$Vz=[8,10,16,32,34,35,37,39,45,46,47,48,50,51,53,54,55,57,64,65,66,83,86],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[8,10,16,32,34,35,37,39,41,42,43,50,51,53,54,55,57,64,65,66,83,86],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,97],$VJ=[8,10,16,32,34,35,37,39,41,42,43,45,46,47,48,53,54,55,57,64,65,66,83,86],$VK=[1,103],$VL=[1,104],$VM=[8,10,16,32,34,35,37,39,41,42,43,45,46,47,48,50,51,57,64,65,66,83,86],$VN=[1,105],$VO=[1,106],$VP=[1,107],$VQ=[1,126],$VR=[1,139],$VS=[83,86],$VT=[1,150],$VU=[10,66,86],$VV=[8,10,16,20,32,34,35,37,39,41,42,43,45,46,47,48,50,51,53,54,55,57,64,65,66,82,83,86],$VW=[1,167],$VX=[10,86];\n/**\n * @class\n * @ignore\n */\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"Program\":3,\"StatementList\":4,\"EOF\":5,\"IfStatement\":6,\"IF\":7,\"(\":8,\"Expression\":9,\")\":10,\"Statement\":11,\"ELSE\":12,\"LoopStatement\":13,\"WHILE\":14,\"FOR\":15,\";\":16,\"DO\":17,\"UnaryStatement\":18,\"USE\":19,\"IDENTIFIER\":20,\"DELETE\":21,\"ReturnStatement\":22,\"RETURN\":23,\"EmptyStatement\":24,\"StatementBlock\":25,\"{\":26,\"}\":27,\"ExpressionStatement\":28,\"AssignmentExpression\":29,\"ConditionalExpression\":30,\"LeftHandSideExpression\":31,\"=\":32,\"LogicalORExpression\":33,\"?\":34,\":\":35,\"LogicalANDExpression\":36,\"||\":37,\"EqualityExpression\":38,\"&&\":39,\"RelationalExpression\":40,\"==\":41,\"!=\":42,\"~=\":43,\"AdditiveExpression\":44,\"<\":45,\">\":46,\"<=\":47,\">=\":48,\"MultiplicativeExpression\":49,\"+\":50,\"-\":51,\"UnaryExpression\":52,\"*\":53,\"/\":54,\"%\":55,\"ExponentExpression\":56,\"^\":57,\"!\":58,\"MemberExpression\":59,\"CallExpression\":60,\"PrimaryExpression\":61,\"FunctionExpression\":62,\"MapExpression\":63,\".\":64,\"[\":65,\"]\":66,\"BasicLiteral\":67,\"ObjectLiteral\":68,\"ArrayLiteral\":69,\"NullLiteral\":70,\"BooleanLiteral\":71,\"StringLiteral\":72,\"NumberLiteral\":73,\"NULL\":74,\"TRUE\":75,\"FALSE\":76,\"STRING\":77,\"NUMBER\":78,\"NAN\":79,\"INFINITY\":80,\"ElementList\":81,\"<<\":82,\">>\":83,\"PropertyList\":84,\"Property\":85,\",\":86,\"PropertyName\":87,\"Arguments\":88,\"AttributeList\":89,\"Attribute\":90,\"FUNCTION\":91,\"ParameterDefinitionList\":92,\"MAP\":93,\"->\":94,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"IF\",8:\"(\",10:\")\",12:\"ELSE\",14:\"WHILE\",15:\"FOR\",16:\";\",17:\"DO\",19:\"USE\",20:\"IDENTIFIER\",21:\"DELETE\",23:\"RETURN\",26:\"{\",27:\"}\",32:\"=\",34:\"?\",35:\":\",37:\"||\",39:\"&&\",41:\"==\",42:\"!=\",43:\"~=\",45:\"<\",46:\">\",47:\"<=\",48:\">=\",50:\"+\",51:\"-\",53:\"*\",54:\"/\",55:\"%\",57:\"^\",58:\"!\",64:\".\",65:\"[\",66:\"]\",74:\"NULL\",75:\"TRUE\",76:\"FALSE\",77:\"STRING\",78:\"NUMBER\",79:\"NAN\",80:\"INFINITY\",82:\"<<\",83:\">>\",86:\",\",91:\"FUNCTION\",93:\"MAP\",94:\"->\"},\nproductions_: [0,[3,2],[6,5],[6,7],[13,5],[13,9],[13,7],[18,2],[18,2],[22,2],[22,3],[24,1],[25,3],[4,2],[4,0],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[11,1],[28,2],[9,1],[29,1],[29,3],[30,1],[30,5],[33,1],[33,3],[36,1],[36,3],[38,1],[38,3],[38,3],[38,3],[40,1],[40,3],[40,3],[40,3],[40,3],[44,1],[44,3],[44,3],[49,1],[49,3],[49,3],[49,3],[56,1],[56,3],[52,1],[52,2],[52,2],[52,2],[31,1],[31,1],[59,1],[59,1],[59,1],[59,3],[59,4],[61,1],[61,1],[61,1],[61,1],[61,3],[67,1],[67,1],[67,1],[67,1],[70,1],[71,1],[71,1],[72,1],[73,1],[73,1],[73,1],[69,2],[69,3],[68,2],[68,3],[84,1],[84,3],[85,3],[87,1],[87,1],[87,1],[60,2],[60,3],[60,2],[60,4],[60,3],[88,2],[88,3],[89,1],[89,3],[90,1],[90,1],[81,1],[81,3],[62,4],[62,5],[63,5],[63,6],[92,1],[92,3]],\n/**\n * @class\n * @ignore\n */\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n return $$[$0-1];\nbreak;\ncase 2:\n this.$ = AST.createNode(lc(_$[$0-4]), 'node_op', 'op_if', $$[$0-2], $$[$0]);\nbreak;\ncase 3:\n this.$ = AST.createNode(lc(_$[$0-6]), 'node_op', 'op_if_else', $$[$0-4], $$[$0-2], $$[$0]);\nbreak;\ncase 4:\n this.$ = AST.createNode(lc(_$[$0-4]), 'node_op', 'op_while', $$[$0-2], $$[$0]);\nbreak;\ncase 5:\n this.$ = AST.createNode(lc(_$[$0-8]), 'node_op', 'op_for', $$[$0-6], $$[$0-4], $$[$0-2], $$[$0]);\nbreak;\ncase 6:\n this.$ = AST.createNode(lc(_$[$0-6]), 'node_op', 'op_do', $$[$0-5], $$[$0-2]);\nbreak;\ncase 7:\n this.$ = AST.createNode(lc(_$[$0-1]), 'node_op', 'op_use', $$[$0]);\nbreak;\ncase 8:\n this.$ = AST.createNode(lc(_$[$0-1]), 'node_op', 'op_delete', $$[$0]);\nbreak;\ncase 9:\n this.$ = AST.createNode(lc(_$[$0-1]), 'node_op', 'op_return', undefined);\nbreak;\ncase 10:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_return', $$[$0-1]);\nbreak;\ncase 11: case 14:\n this.$ = AST.createNode(lc(_$[$0]), 'node_op', 'op_none');\nbreak;\ncase 12:\n this.$ = $$[$0-1]; this.$.needsBrackets = true;\nbreak;\ncase 13:\n this.$ = AST.createNode(lc(_$[$0-1]), 'node_op', 'op_none', $$[$0-1], $$[$0]);\nbreak;\ncase 15: case 16: case 17: case 18: case 19: case 20: case 21: case 23: case 24: case 26: case 28: case 30: case 32: case 36: case 41: case 44: case 48: case 50: case 52: case 54: case 55: case 56: case 58: case 62: case 81: case 84: case 85: case 86:\n this.$ = $$[$0];\nbreak;\ncase 22: case 65: case 93:\n this.$ = $$[$0-1];\nbreak;\ncase 25:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_assign', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 27:\n this.$ = AST.createNode(lc(_$[$0-4]), 'node_op', 'op_conditional', $$[$0-4], $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 29:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_or', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 31:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_and', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 33:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_eq', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 34:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_neq', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 35:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_approx', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 37:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_lt', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 38:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_gt', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 39:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_leq', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 40:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_geq', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 42:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_add', $$[$0-2], $$[$0]); this.$.isMath = true;\nbreak;\ncase 43:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_sub', $$[$0-2], $$[$0]); this.$.isMath = true;\nbreak;\ncase 45:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_mul', $$[$0-2], $$[$0]); this.$.isMath = true;\nbreak;\ncase 46:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_div', $$[$0-2], $$[$0]); this.$.isMath = true;\nbreak;\ncase 47:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_mod', $$[$0-2], $$[$0]); this.$.isMath = true;\nbreak;\ncase 49:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_exp', $$[$0-2], $$[$0]); this.$.isMath = true;\nbreak;\ncase 51:\n this.$ = AST.createNode(lc(_$[$0-1]), 'node_op', 'op_not', $$[$0]); this.$.isMath = false;\nbreak;\ncase 53:\n this.$ = AST.createNode(lc(_$[$0-1]), 'node_op', 'op_neg', $$[$0]); this.$.isMath = true;\nbreak;\ncase 57: case 63: case 64: case 66: case 67: case 68: case 97:\n this.$ = $$[$0]; this.$.isMath = false;\nbreak;\ncase 59: case 91:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_property', $$[$0-2], $$[$0]); this.$.isMath = true;\nbreak;\ncase 60: case 90:\n this.$ = AST.createNode(lc(_$[$0-3]), 'node_op', 'op_extvalue', $$[$0-3], $$[$0-1]); this.$.isMath = true;\nbreak;\ncase 61:\n this.$ = AST.createNode(lc(_$[$0]), 'node_var', $$[$0]);\nbreak;\ncase 69:\n this.$ = $$[$0]; this.$.isMath = true;\nbreak;\ncase 70:\n this.$ = AST.createNode(lc(_$[$0]), 'node_const', null);\nbreak;\ncase 71:\n this.$ = AST.createNode(lc(_$[$0]), 'node_const_bool', true);\nbreak;\ncase 72:\n this.$ = AST.createNode(lc(_$[$0]), 'node_const_bool', false);\nbreak;\ncase 73:\n this.$ = AST.createNode(lc(_$[$0]), 'node_str', $$[$0].substring(1, $$[$0].length - 1));\nbreak;\ncase 74:\n this.$ = AST.createNode(lc(_$[$0]), 'node_const', parseFloat($$[$0]));\nbreak;\ncase 75:\n this.$ = AST.createNode(lc(_$[$0]), 'node_const', NaN);\nbreak;\ncase 76:\n this.$ = AST.createNode(lc(_$[$0]), 'node_const', Infinity);\nbreak;\ncase 77:\n this.$ = AST.createNode(lc(_$[$0-1]), 'node_op', 'op_array', []);\nbreak;\ncase 78:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_array', $$[$0-1]);\nbreak;\ncase 79:\n this.$ = AST.createNode(lc(_$[$0-1]), 'node_op', 'op_emptyobject', {}); this.$.needsAngleBrackets = true;\nbreak;\ncase 80:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_proplst_val', $$[$0-1]); this.$.needsAngleBrackets = true;\nbreak;\ncase 82:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_proplst', $$[$0-2], $$[$0]);\nbreak;\ncase 83:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_prop', $$[$0-2], $$[$0]);\nbreak;\ncase 87: case 89:\n this.$ = AST.createNode(lc(_$[$0-1]), 'node_op', 'op_execfun', $$[$0-1], $$[$0]); this.$.isMath = true;\nbreak;\ncase 88:\n this.$ = AST.createNode(lc(_$[$0-2]), 'node_op', 'op_execfun', $$[$0-2], $$[$0-1], $$[$0], true); this.$.isMath = false;\nbreak;\ncase 92:\n this.$ = [];\nbreak;\ncase 94: case 98: case 104:\n this.$ = [$$[$0]];\nbreak;\ncase 95: case 99: case 105:\n this.$ = $$[$0-2].concat($$[$0]);\nbreak;\ncase 96:\n this.$ = AST.createNode(lc(_$[$0]), 'node_var', $$[$0]); this.$.isMath = true;\nbreak;\ncase 100:\n this.$ = AST.createNode(lc(_$[$0-3]), 'node_op', 'op_function', [], $$[$0]); this.$.isMath = false;\nbreak;\ncase 101:\n this.$ = AST.createNode(lc(_$[$0-4]), 'node_op', 'op_function', $$[$0-2], $$[$0]); this.$.isMath = false;\nbreak;\ncase 102:\n this.$ = AST.createNode(lc(_$[$0-4]), 'node_op', 'op_map', [], $$[$0]);\nbreak;\ncase 103:\n this.$ = AST.createNode(lc(_$[$0-5]), 'node_op', 'op_map', $$[$0-3], $$[$0]);\nbreak;\n}\n},\ntable: [o([5,7,8,14,15,16,17,19,20,21,23,26,50,51,58,65,74,75,76,77,78,79,80,82,91,93],$V0,{3:1,4:2}),{1:[3]},{5:[1,3],6:6,7:$V1,8:$V2,9:20,11:4,13:7,14:$V3,15:$V4,16:$V5,17:$V6,18:8,19:$V7,20:$V8,21:$V9,22:9,23:$Va,24:11,25:5,26:$Vb,28:10,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{1:[2,1]},o($Vq,[2,13]),o($Vr,[2,15]),o($Vr,[2,16]),o($Vr,[2,17]),o($Vr,[2,18]),o($Vr,[2,19]),o($Vr,[2,20]),o($Vr,[2,21]),o([7,8,14,15,16,17,19,20,21,23,26,27,50,51,58,65,74,75,76,77,78,79,80,82,91,93],$V0,{4:61}),{8:[1,62]},{8:[1,63]},{8:[1,64]},{6:6,7:$V1,8:$V2,9:20,11:65,13:7,14:$V3,15:$V4,16:$V5,17:$V6,18:8,19:$V7,20:$V8,21:$V9,22:9,23:$Va,24:11,25:5,26:$Vb,28:10,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{20:[1,66]},{20:[1,67]},{8:$V2,9:69,16:[1,68],20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{16:[1,70]},o($Vr,[2,11]),o($Vs,[2,23]),o($Vs,[2,24]),o([8,10,16,34,35,37,39,41,42,43,45,46,47,48,50,51,53,54,55,64,65,66,83,86],$Vt,{32:[1,71],57:$Vu}),o([8,10,16,32,35,39,41,42,43,45,46,47,48,50,51,53,54,55,57,64,65,66,83,86],[2,26],{34:[1,73],37:[1,74]}),o($Vv,[2,54],{88:77,8:$Vw,64:[1,75],65:[1,76]}),o($Vv,[2,55],{88:79,8:$Vw,64:[1,81],65:[1,80]}),o($Vx,[2,28],{39:$Vy}),o($Vs,[2,56]),o($Vs,[2,57]),o($Vs,[2,58]),o($Vz,[2,30],{41:$VA,42:$VB,43:$VC}),o($Vs,[2,61]),o($Vs,[2,62]),o($Vs,[2,63]),o($Vs,[2,64]),{8:$V2,9:86,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:[1,87]},{8:[1,88]},o($VD,[2,32],{45:$VE,46:$VF,47:$VG,48:$VH}),o($Vs,[2,66]),o($Vs,[2,67]),o($Vs,[2,68]),o($Vs,[2,69]),{20:$VI,72:98,73:99,77:$Vj,78:$Vk,79:$Vl,80:$Vm,83:[1,93],84:94,85:95,87:96},{8:$V2,20:$V8,29:102,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,66:[1,100],67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:101,82:$Vn,91:$Vo,93:$Vp},o($VJ,[2,36],{50:$VK,51:$VL}),o($Vs,[2,70]),o($Vs,[2,71]),o($Vs,[2,72]),o($Vs,[2,73]),o($Vs,[2,74]),o($Vs,[2,75]),o($Vs,[2,76]),o($VM,[2,41],{53:$VN,54:$VO,55:$VP}),o($Vs,[2,44]),o($Vs,[2,50]),{8:$V2,20:$V8,31:109,50:$Vc,51:$Vd,52:108,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,50:$Vc,51:$Vd,52:110,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,50:$Vc,51:$Vd,52:111,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{6:6,7:$V1,8:$V2,9:20,11:4,13:7,14:$V3,15:$V4,16:$V5,17:$V6,18:8,19:$V7,20:$V8,21:$V9,22:9,23:$Va,24:11,25:5,26:$Vb,27:[1,112],28:10,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,9:113,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,9:114,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,9:115,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{14:[1,116]},o($Vr,[2,7]),o($Vr,[2,8]),o($Vr,[2,9]),{16:[1,117]},o($Vr,[2,22]),{8:$V2,20:$V8,29:118,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,50:$Vc,51:$Vd,52:119,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,29:120,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,36:121,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{20:[1,122]},{8:$V2,9:123,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},o($Vs,[2,87],{89:124,90:125,68:127,20:$VQ,82:$Vn}),{8:$V2,10:[1,128],20:$V8,29:102,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,81:129,82:$Vn,91:$Vo,93:$Vp},o($Vs,[2,89]),{8:$V2,9:130,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{20:[1,131]},{8:$V2,20:$V8,31:109,38:132,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,40:133,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,40:134,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,40:135,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{10:[1,136]},{10:[1,137],20:$VR,92:138},{10:[1,140],20:$VR,92:141},{8:$V2,20:$V8,31:109,44:142,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,44:143,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,44:144,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,44:145,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},o($Vs,[2,79]),{83:[1,146],86:[1,147]},o($VS,[2,81]),{35:[1,148]},{35:[2,84]},{35:[2,85]},{35:[2,86]},o($Vs,[2,77]),{66:[1,149],86:$VT},o($VU,[2,98]),{8:$V2,20:$V8,31:109,49:151,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,49:152,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,50:$Vc,51:$Vd,52:153,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,50:$Vc,51:$Vd,52:154,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,31:109,50:$Vc,51:$Vd,52:155,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},o($Vs,[2,51]),o([8,10,16,32,34,35,37,39,41,42,43,45,46,47,48,50,51,53,54,55,64,65,66,83,86],$Vt,{57:$Vu}),o($Vs,[2,52]),o($Vs,[2,53]),o([5,7,8,10,12,14,15,16,17,19,20,21,23,26,27,32,34,35,37,39,41,42,43,45,46,47,48,50,51,53,54,55,57,58,64,65,66,74,75,76,77,78,79,80,82,83,86,91,93],[2,12]),{10:[1,156]},{10:[1,157]},{16:[1,158]},{8:[1,159]},o($Vr,[2,10]),o($Vs,[2,25]),o($Vs,[2,49]),{35:[1,160]},o($Vx,[2,29],{39:$Vy}),o($Vs,[2,59]),{66:[1,161]},o([8,10,16,32,34,35,37,39,41,42,43,45,46,47,48,50,51,53,54,55,57,64,65,66,83],[2,88],{86:[1,162]}),o($Vs,[2,94]),o($Vs,[2,96]),o($Vs,[2,97]),o($VV,[2,92]),{10:[1,163],86:$VT},{66:[1,164]},o($Vs,[2,91]),o($Vz,[2,31],{41:$VA,42:$VB,43:$VC}),o($VD,[2,33],{45:$VE,46:$VF,47:$VG,48:$VH}),o($VD,[2,34],{45:$VE,46:$VF,47:$VG,48:$VH}),o($VD,[2,35],{45:$VE,46:$VF,47:$VG,48:$VH}),o($Vs,[2,65]),{25:165,26:$Vb},{10:[1,166],86:$VW},o($VX,[2,104]),{94:[1,168]},{10:[1,169],86:$VW},o($VJ,[2,37],{50:$VK,51:$VL}),o($VJ,[2,38],{50:$VK,51:$VL}),o($VJ,[2,39],{50:$VK,51:$VL}),o($VJ,[2,40],{50:$VK,51:$VL}),o($Vs,[2,80]),{20:$VI,72:98,73:99,77:$Vj,78:$Vk,79:$Vl,80:$Vm,85:170,87:96},{8:$V2,20:$V8,29:171,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},o($Vs,[2,78]),{8:$V2,20:$V8,29:172,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},o($VM,[2,42],{53:$VN,54:$VO,55:$VP}),o($VM,[2,43],{53:$VN,54:$VO,55:$VP}),o($Vs,[2,45]),o($Vs,[2,46]),o($Vs,[2,47]),{6:6,7:$V1,8:$V2,9:20,11:173,13:7,14:$V3,15:$V4,16:$V5,17:$V6,18:8,19:$V7,20:$V8,21:$V9,22:9,23:$Va,24:11,25:5,26:$Vb,28:10,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{6:6,7:$V1,8:$V2,9:20,11:174,13:7,14:$V3,15:$V4,16:$V5,17:$V6,18:8,19:$V7,20:$V8,21:$V9,22:9,23:$Va,24:11,25:5,26:$Vb,28:10,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,9:175,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,9:176,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,20:$V8,29:177,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},o($Vs,[2,60]),{20:$VQ,68:127,82:$Vn,90:178},o($VV,[2,93]),o($Vs,[2,90]),o($Vs,[2,100]),{25:179,26:$Vb},{20:[1,180]},{8:$V2,9:181,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{94:[1,182]},o($VS,[2,82]),o($VS,[2,83]),o($VU,[2,99]),o($Vq,[2,2],{12:[1,183]}),o($Vr,[2,4]),{16:[1,184]},{10:[1,185]},o($Vs,[2,27]),o($Vs,[2,95]),o($Vs,[2,101]),o($VX,[2,105]),o($Vs,[2,102]),{8:$V2,9:186,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{6:6,7:$V1,8:$V2,9:20,11:187,13:7,14:$V3,15:$V4,16:$V5,17:$V6,18:8,19:$V7,20:$V8,21:$V9,22:9,23:$Va,24:11,25:5,26:$Vb,28:10,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{8:$V2,9:188,20:$V8,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},{16:[1,189]},o($Vs,[2,103]),o($Vr,[2,3]),{10:[1,190]},o($Vr,[2,6]),{6:6,7:$V1,8:$V2,9:20,11:191,13:7,14:$V3,15:$V4,16:$V5,17:$V6,18:8,19:$V7,20:$V8,21:$V9,22:9,23:$Va,24:11,25:5,26:$Vb,28:10,29:22,30:23,31:24,33:25,36:28,38:32,40:40,44:47,49:55,50:$Vc,51:$Vd,52:56,56:57,58:$Ve,59:26,60:27,61:29,62:30,63:31,65:$Vf,67:34,68:35,69:36,70:41,71:42,72:43,73:44,74:$Vg,75:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl,80:$Vm,82:$Vn,91:$Vo,93:$Vp},o($Vr,[2,5])],\ndefaultActions: {3:[2,1],97:[2,84],98:[2,85],99:[2,86]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\n/**\n * @class\n * @ignore\n */\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n\n    var AST = {\n        node: function (type, value, children) {\n            return {\n                type: type,\n                value: value,\n                children: children\n            };\n        },\n\n        createNode: function (pos, type, value, children) {\n            var i,\n                n = this.node(type, value, []);\n\n            for (i = 3; i < arguments.length; i++) {\n                n.children.push(arguments[i]);\n            }\n\n            n.line = pos[0];\n            n.col = pos[1];\n            n.eline = pos[2];\n            n.ecol = pos[3];\n\n            return n;\n        }\n    };\n\n    var lc = function (lc1) {\n        return [lc1.first_line, lc1.first_column, lc1.last_line, lc1.last_column];\n    };\n\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\n/**\n * @class\n * @ignore\n */\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* ignore */\nbreak;\ncase 1:return 78  /* New 123.1234e+-12 */\nbreak;\ncase 2:return 78  /* Old 123.1234 or .1234 */\nbreak;\ncase 3:return 78  /* Old 123 */\nbreak;\ncase 4: return 77;\nbreak;\ncase 5: return 77;\nbreak;\ncase 6:/* ignore comment */\nbreak;\ncase 7:/* ignore multiline comment */\nbreak;\ncase 8:return 7\nbreak;\ncase 9:return 12\nbreak;\ncase 10:return 14\nbreak;\ncase 11:return 17\nbreak;\ncase 12:return 15\nbreak;\ncase 13:return 91\nbreak;\ncase 14:return 93\nbreak;\ncase 15:return 19\nbreak;\ncase 16:return 23\nbreak;\ncase 17:return 21\nbreak;\ncase 18:return 75\nbreak;\ncase 19:return 76\nbreak;\ncase 20:return 74\nbreak;\ncase 21:return 80\nbreak;\ncase 22:return 94\nbreak;\ncase 23:return 94\nbreak;\ncase 24:return 82\nbreak;\ncase 25:return 83\nbreak;\ncase 26:return 26\nbreak;\ncase 27:return 27\nbreak;\ncase 28:return 16\nbreak;\ncase 29:return '#'\nbreak;\ncase 30:return 34\nbreak;\ncase 31:return 35\nbreak;\ncase 32:return 79\nbreak;\ncase 33:return 64\nbreak;\ncase 34:return 65\nbreak;\ncase 35:return 66\nbreak;\ncase 36:return 8\nbreak;\ncase 37:return 10\nbreak;\ncase 38:return 58\nbreak;\ncase 39:return 57\nbreak;\ncase 40:return 57\nbreak;\ncase 41:return 53\nbreak;\ncase 42:return 54\nbreak;\ncase 43:return 55\nbreak;\ncase 44:return 50\nbreak;\ncase 45:return 51\nbreak;\ncase 46:return 47\nbreak;\ncase 47:return 45\nbreak;\ncase 48:return 48\nbreak;\ncase 49:return 46\nbreak;\ncase 50:return 41\nbreak;\ncase 51:return 43\nbreak;\ncase 52:return 42\nbreak;\ncase 53:return 39\nbreak;\ncase 54:return 37\nbreak;\ncase 55:return 32\nbreak;\ncase 56:return 86\nbreak;\ncase 57:return 5\nbreak;\ncase 58:return 20\nbreak;\ncase 59:return 'INVALID'\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+))/,/^(?:[0-9]+\\.[0-9]*|[0-9]*\\.[0-9]+\\b)/,/^(?:[0-9]+)/,/^(?:\"(\\\\[\"]|[^\"])*\")/,/^(?:'(\\\\[']|[^'])*')/,/^(?:\\/\\/.*)/,/^(?:\\/\\*(.|\\n|\\r)*?\\*\\/)/,/^(?:if\\b)/,/^(?:else\\b)/,/^(?:while\\b)/,/^(?:do\\b)/,/^(?:for\\b)/,/^(?:function\\b)/,/^(?:map\\b)/,/^(?:use\\b)/,/^(?:return\\b)/,/^(?:delete\\b)/,/^(?:true\\b)/,/^(?:false\\b)/,/^(?:null\\b)/,/^(?:Infinity\\b)/,/^(?:->)/,/^(?:=>)/,/^(?:<<)/,/^(?:>>)/,/^(?:\\{)/,/^(?:\\})/,/^(?:;)/,/^(?:#)/,/^(?:\\?)/,/^(?::)/,/^(?:NaN\\b)/,/^(?:\\.)/,/^(?:\\[)/,/^(?:\\])/,/^(?:\\()/,/^(?:\\))/,/^(?:!)/,/^(?:\\^)/,/^(?:\\*\\*)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:%)/,/^(?:\\+)/,/^(?:-)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:==)/,/^(?:~=)/,/^(?:!=)/,/^(?:&&)/,/^(?:\\|\\|)/,/^(?:=)/,/^(?:,)/,/^(?:$)/,/^(?:[A-Za-z_\\$][A-Za-z0-9_]*)/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\n/**\n * @class\n * @ignore\n */\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n// Work around an issue with browsers that don't support Object.getPrototypeOf()\nparser.yy.parseError = parser.parseError;\n\nexport default JXG.JessieCode;\n"],"names":[],"mappings":"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AAG;QAAG;QAAG;QAAG;QAAG;KAAG,EAAC,MAAI;QAAC;QAAE;QAAE;QAAE;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAG,EAAC,MAAI;QAAC;QAAE;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;QAAG;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;KAAG,EAAC,MAAI;QAAC;QAAE;QAAG;QAAG;QAAG;QAAG;QAAG;Q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E;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAE;aAAE;YAAC;gBAAC;gBAAE;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAE;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC;gBAAG;aAAE;YAAC;gBAAC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AG;YAAE;gBAAC,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,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AG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,IAAG;oBAAC;oBAAE;i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AAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;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AAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;YAAG;YAAE;gBAAC,GAAE;gBAAI,GAAE;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAG,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG;gBAAI,IAAG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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 7877, "column": 0}, "map": {"version":3,"sources":["file:///Users/kristynacoufalova/Documents/geometry_review/node_modules/jsxgraph/src/parser/prefix.js"],"sourcesContent":["/*\n    Copyright 2008-2025\n        Matthias Ehmann,\n        Carsten Miller,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/**\n * @fileoverview Simple prefix parser for measurements and expressions of measurements.\n * An expression is given as\n * <ul>\n * <li> array starting with an operator as first element, followed\n * by one or more operands,\n * <li> number.\n * </ul>\n * <p>\n * Possible operands are:\n * <ul>\n * <li> '+', '-', '*', '/'\n * </ul>\n *\n * @example\n *\n */\nimport JXG from \"../jxg.js\";\nimport Type from \"../utils/type.js\";\nimport Mat from \"../math/math.js\";\nimport Const from \"../base/constants.js\";\n\n/**\n * Prefix expression parser, i.e. a poor man's parser.\n * This is a simple prefix parser for measurements and expressions of measurements,\n * see {@link Measurement}.\n * An expression is given as\n * <ul>\n * <li> array starting with an operator as first element, followed\n * by one or more operands,\n * <li> number.\n * </ul>\n * <p>\n * Possible operators are:\n * <ul>\n * <li> '+', '-', '*', '/': binary operators\n * <li> 'Area', 'Radius', 'Value', 'V', 'L': arbitrary methods of JSXGraph elements, supplied as strings.\n * <li> 'exec': call a function\n * </ul>\n * <p>\n * Possible operands are:\n * <ul>\n * <li> numbers\n * <li> strings\n * <li> JSXGraph elements in case the operator is a method. Example: ['Area', circle] calls\n * the method circle.Area().\n * <li> prefix expressions (for binary operators)\n * <li> 'exec': call functions. Example: ['exec', 'sin', ['V', slider]] computes 'Math.sin(slider.Value())'.\n * As functions only functions in Math or JXG.Math are allowed.\n * </ul>\n * @namespace\n *\n * @example\n *   ['+', 100, 200]\n * @example\n * var p1 = board.create('point', [1, 1]);\n * var p2 = board.create('point', [1, 3]);\n * var seg = board.create('segment', [[-2,-3], [-2, 3]]);\n *\n * // Valid prefix expression: ['L', seg]\n *\n * @example\n * var p1 = board.create('point', [1, 1]);\n * var p2 = board.create('point', [1, 3]);\n * var seg = board.create('segment', [[-2,-3], [-2, 3]]);\n * var ci = board.create('circle', [p1, 7]);\n *\n * // Valid prefix expression:  ['+', ['Radius', ci], ['L', seg]]\n *\n * @example\n * var ang = board.create('angle', [[4, 0], [0, 0], [2, 2]]);\n * // Valid prefix expression:  ['V', ang, 'degrees']);\n */\nJXG.PrefixParser = {\n    /**\n     * Parse a prefix expression and apply an action.\n     * @param {array|number} term Expression\n     * @param {String} action Determines what to do. So far, the only\n     * action available is 'execute', which evaluates the expression.\n     * @returns {Number} What ever the action does.\n     */\n    parse: function (term, action) {\n        var method, i, le, res, fun, v;\n\n        if (Type.isNumber(term) || Type.isString(term)) {\n            return term;\n        }\n        if (!Type.isArray(term) || term.length < 2) {\n            throw new Error('prefixParser.parse: term is not an array, number or string');\n        }\n\n        method = term[0];\n        le = term.length;\n\n        if (action === 'execute') {\n            if (Type.isInArray(['+', '-', '*', '/'], method)) {\n\n                res = this.parse(term[1], action);\n                for (i = 2; i < le; i++) {\n                    v = this.parse(term[i], action);\n                    switch (method) {\n                        case '+':\n                            res += v;\n                            break;\n                        case '-':\n                            res -= v;\n                            break;\n                        case '*':\n                            res *= v;\n                            break;\n                        case '/':\n                            res /= v;\n                            break;\n                        default:\n                    }\n                }\n            } else if (method === 'exec') {\n                fun = term[1];\n                v = [];\n                for (i = 2; i < le; i++) {\n                    v.push(this.parse(term[i], action));\n                }\n                if (Type.exists(Math[fun])) {\n                    res = Math[fun].apply(this, v);\n                } else if (Type.exists(Mat[fun])) {\n                    res = Mat[fun].apply(this, v);\n                } else {\n                    throw new Error(\"PrefixParser.parse: \" + fun + \" is not allowed\");\n                }\n            } else {\n                fun = term[0];\n\n                // Allow shortcut 'V' for 'Value'\n                if (fun === 'V') {\n                    fun = 'Value';\n                }\n\n                // get coords always with z\n                // (its visibility is controlled by the attribute function formatCoords)\n                if (fun === 'Coords') {\n                    term[2] = 'true';\n                }\n\n                if (!Type.exists(term[1][fun])) {\n                    throw new Error(\"PrefixParser.parse: \" + fun + \" is not a method of \" + term[1]);\n                }\n                v = [];\n                for (i = 2; i < le; i++) {\n                    v.push(this.parse(term[i], action));\n                }\n                res = term[1][fun].apply(term[1], v);\n            }\n        }\n\n        return res;\n    },\n\n    /**\n     * Determine the dimension of the resulting value, i.e. ['L', obj] as well as\n     * ['+', ['L', obj1], ['L', obj2]] have dimension 1.\n     * <p>\n     * ['+', ['Area', obj1], ['L', obj2]] will retrun NaN, because the two\n     * operands have conflicting dimensions.\n     * <p>\n     * If an element is a measurement element, then it's dimension can be set as attribute.\n     * This overrules the computed dimension.\n     *\n     * @param {Array|Number} term Prefix expression\n     * @returns Number\n     */\n    dimension: function (term) {\n        var method, i, le, res, fun, d, v, unit;\n\n        if (Type.isNumber(term)) {\n            return 0;\n        }\n        if (!Type.isArray(term) || term.length < 2) {\n            throw new Error('PrefixParser.dimension: term is not an array');\n        }\n\n        method = term[0];\n        le = term.length;\n\n        if (Type.isInArray(['+', '-', '*', '/'], method)) {\n\n            res = this.dimension(term[1]);\n            for (i = 2; i < le; i++) {\n                v = this.dimension(term[i]);\n                switch (method) {\n                    case '+':\n                        if (v !== res) {\n                            res = NaN;\n                        }\n                        break;\n                    case '-':\n                        if (v !== res) {\n                            res = NaN;\n                        }\n                        break;\n                    case '*':\n                        res += v;\n                        break;\n                    case '/':\n                        res -= v;\n                        break;\n                    default:\n                }\n            }\n\n        } else if (method === 'exec') {\n            if (term[2].type === Type.OBJECT_TYPE_MEASUREMENT) {\n                res = term[2].Dimension();\n                // If attribute \"dim\" is set, this overrules anything else.\n                if (Type.exists(term[2].visProp.dim)) {\n                    d = term[2].evalVisProp('dim');\n                    if (d !== null) {\n                        res = d;\n                    }\n                }\n            } else {\n                res = 0;\n            }\n        } else {\n            // Allow shortcut 'V' for 'Value'\n            fun = term[0];\n\n            switch (fun) {\n                case 'L':\n                case 'Length':\n                case 'Perimeter':\n                case 'Radius':\n                case 'R':\n                    res = 1;\n                    break;\n                case 'Area':\n                case 'A':\n                    res = 2;\n                    break;\n                default: // 'V', 'Value'\n                    if (term[1].type === Type.OBJECT_TYPE_MEASUREMENT) {\n                        res = term[1].Dimension();\n                        // If attribute \"dim\" is set, this overrules anything else.\n                        if (Type.exists(term[1].visProp.dim)) {\n                            d = term[1].evalVisProp('dim');\n                            if (d !== null) {\n                                res = d;\n                            }\n                        }\n                    } else {\n                        res = 0;\n\n                        if (fun === 'Value' || fun === 'V') {\n                            // The Value method of sector, angle and arc does not have the same dimension\n                            // for all units.\n                            if ([Const.OBJECT_TYPE_ARC, Const.OBJECT_TYPE_SECTOR, Const.OBJECT_TYPE_ANGLE].indexOf(term[1].type) >= 0) {\n                                unit = '';\n                                if (term.length === 3 && Type.isString(term[2])) {\n                                    unit = term[2].toLowerCase();\n                                }\n                                if (unit === '') {\n                                    // Default values:\n                                    if (term[1].type === Const.OBJECT_TYPE_ANGLE) {\n                                        // Default for angle.Value() is radians, i.e. dim 0\n                                        res = 0;\n                                    } else {\n                                        // Default for sector|arc.Value() is length, i.e. dim 1\n                                        res = 1;\n                                    }\n                                } else if (unit.indexOf('len') === 0) {\n                                    // Length has dim 1\n                                    res = 1;\n                                } else {\n                                    // Angles in various units has dimension 0\n                                    res = 0;\n                                }\n                            }\n                        }\n                    }\n            }\n        }\n\n        return res;\n    },\n\n    /**\n     * Convert a prefix expression into a new prefix expression in which\n     * JSXGraph elements have been replaced by their ids.\n     *\n     * @param {Array|Number} term\n     * @returns {Array|Number}\n     */\n    toPrefix: function (term) {\n        var method, i, le, res;\n\n        if (Type.isNumber(term)) {\n            return term;\n        }\n        if (!Type.isArray(term) || term.length < 2) {\n            throw new Error('PrefixParser.toPrefix: term is not an array');\n        }\n\n        method = term[0];\n        le = term.length;\n        res = [method];\n\n        for (i = 1; i < le; i++) {\n            if (Type.isInArray(['+', '-', '*', '/'], method)) {\n                res.push(this.toPrefix(term[i]));\n            } else {\n                if (method === 'V' && term[i].type === Type.OBJECT_TYPE_MEASUREMENT) {\n                    res = term[i].toPrefix();\n                } else if (method === 'exec') {\n                    if (i === 1) {\n                        res.push(term[i]);\n                    } else {\n                        res.push(this.toPrefix(term[i]));\n                    }\n                } else {\n                    res = [method, term[i].id];\n                }\n            }\n        }\n\n        return res;\n    },\n\n    /**\n     * Determine parent elements of a prefix expression.\n     * @param {Array|Number} term prefix expression\n     * @returns Array\n     * @private\n     */\n    getParents: function (term) {\n        var method, i, le, res;\n\n        if (Type.isNumber(term)) {\n            return [];\n        }\n        if (!Type.isArray(term) || term.length < 2) {\n            throw new Error('PrefixParser.getParents: term is not an array');\n        }\n\n        method = term[0];\n        le = term.length;\n        res = [];\n\n        for (i = 1; i < le; i++) {\n            if (Type.isInArray(['+', '-', '*', '/'], method)) {\n                Type.concat(res, this.getParents(term[i]));\n            } else {\n                if (method === 'V' && term[i].type === Type.OBJECT_TYPE_MEASUREMENT) {\n                    Type.concat(res, term[i].getParents());\n                } else if (method === 'exec') {\n                    if (i > 1) {\n                        Type.concat(res, this.getParents(term[i]));\n                    }\n                } else {\n                    res.push(term[i]);\n                }\n            }\n        }\n\n        return res;\n    }\n};\n\nexport default JXG.PrefixParser;"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8276, "column": 0}, "map": {"version":3,"sources":["file:///Users/kristynacoufalova/Documents/geometry_review/node_modules/jsxgraph/src/parser/datasource.js"],"sourcesContent":["/*\n    Copyright 2008-2025\n        Matthias Ehmann,\n        Michael Gerhaeuser,\n        Carsten Miller,\n        Bianca Valentin,\n        Alfred Wassermann,\n        Peter Wilfahrt\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true, document: true*/\n/*jslint nomen: true, plusplus: true*/\n\n/**\n * @fileoverview The JXG.DataSource is a helper class for data organization. Currently supported data sources are\n * javascript arrays and HTML tables.\n */\n\nimport JXG from \"../jxg.js\";\nimport Type from \"../utils/type.js\";\n\nJXG.DataSource = function () {\n    this.data = [];\n    this.columnHeaders = [];\n    this.rowHeaders = [];\n\n    return this;\n};\n\nJXG.extend(\n    JXG.DataSource.prototype,\n    /** @lends JXG.DataSource.prototype */ {\n        loadFromArray: function (table, columnHeader, rowHeader) {\n            var i, j, cell;\n\n            if (Type.isArray(columnHeader)) {\n                this.columnHeaders = columnHeader;\n                columnHeader = false;\n            }\n\n            if (Type.isArray(rowHeader)) {\n                this.rowHeaders = rowHeader;\n                rowHeader = false;\n            }\n\n            this.data = [];\n\n            if (columnHeader) {\n                this.columnHeaders = [];\n            }\n\n            if (rowHeader) {\n                this.rowHeaders = [];\n            }\n\n            if (Type.exists(table)) {\n                // extract the data\n                this.data = [];\n\n                for (i = 0; i < table.length; i++) {\n                    this.data[i] = [];\n\n                    for (j = 0; j < table[i].length; j++) {\n                        cell = table[i][j];\n                        if (parseFloat(cell).toString() === cell) {\n                            this.data[i][j] = parseFloat(cell);\n                        } else if (cell !== \"-\") {\n                            this.data[i][j] = cell;\n                        } else {\n                            this.data[i][j] = NaN;\n                        }\n                    }\n                }\n\n                if (columnHeader) {\n                    this.columnHeaders = this.data[0].slice(1);\n                    this.data = this.data.slice(1);\n                }\n\n                if (rowHeader) {\n                    this.rowHeaders = [];\n                    for (i = 0; i < this.data.length; i++) {\n                        this.rowHeaders.push(this.data[i][0]);\n                        this.data[i] = this.data[i].slice(1);\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        loadFromTable: function (table, columnHeader, rowHeader) {\n            var row, i, j, col, cell;\n\n            if (Type.isArray(columnHeader)) {\n                this.columnHeaders = columnHeader;\n                columnHeader = false;\n            }\n\n            if (Type.isArray(rowHeader)) {\n                this.rowHeaders = rowHeader;\n                rowHeader = false;\n            }\n\n            this.data = [];\n\n            if (columnHeader) {\n                this.columnHeaders = [];\n            }\n\n            if (rowHeader) {\n                this.rowHeaders = [];\n            }\n\n            // to adjust: examples in examples folder & wiki\n            table = document.getElementById(table);\n\n            if (Type.exists(table)) {\n                // extract the data\n                row = table.getElementsByTagName(\"tr\");\n                this.data = [];\n\n                for (i = 0; i < row.length; i++) {\n                    col = row[i].getElementsByTagName(\"td\");\n                    this.data[i] = [];\n\n                    for (j = 0; j < col.length; j++) {\n                        cell = col[j].innerHTML;\n\n                        if (parseFloat(cell).toString() === cell) {\n                            this.data[i][j] = parseFloat(cell);\n                        } else if (cell !== \"-\") {\n                            this.data[i][j] = cell;\n                        } else {\n                            this.data[i][j] = NaN;\n                        }\n                    }\n                }\n\n                if (columnHeader) {\n                    this.columnHeaders = this.data[0].slice(1);\n                    this.data = this.data.slice(1);\n                }\n\n                if (rowHeader) {\n                    this.rowHeaders = [];\n                    for (i = 0; i < this.data.length; i++) {\n                        this.rowHeaders.push(this.data[i][0]);\n                        this.data[i] = this.data[i].slice(1);\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        addColumn: function (name, pos, data) {\n            throw new Error(\"not implemented\");\n        },\n\n        addRow: function (name, pos, data) {\n            throw new Error(\"not implemented\");\n        },\n\n        getColumn: function (col) {\n            var i,\n                result = [];\n\n            // get column index if column is given as column header title\n            if (Type.isString(col)) {\n                for (i = 0; i < this.columnHeaders.length; i++) {\n                    if (col === this.columnHeaders[i]) {\n                        col = i;\n                        break;\n                    }\n                }\n            }\n\n            // build column array\n            for (i = 0; i < this.data.length; i++) {\n                if (this.data[i].length > col) {\n                    result[i] = parseFloat(this.data[i][col]);\n                }\n            }\n\n            return result;\n        },\n\n        getRow: function (row) {\n            var result, i;\n\n            // get column index if column is given as column header title\n            if (Type.isString(row)) {\n                for (i = 0; i < this.rowHeaders.length; i++) {\n                    if (row === this.rowHeaders[i]) {\n                        row = i;\n                        break;\n                    }\n                }\n            }\n\n            // allocate memory for result array\n            result = [];\n\n            // build column array. result = this.data[row] is a flat copy and will\n            // destroy our local data copy, that's why we're copying it element wise.\n            for (i = 0; i < this.data[row].length; i++) {\n                result[i] = this.data[row][i];\n            }\n\n            return result;\n        }\n    }\n);\n\nexport default JXG.DataSource;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 8472, "column": 0}, "map": {"version":3,"sources":["file:///Users/kristynacoufalova/Documents/geometry_review/node_modules/jsxgraph/src/parser/ca.js"],"sourcesContent":["/*\n JessieCode Computer algebra algorithms\n\n    Copyright 2011-2019\n        Michael Gerhaeuser,\n        Alfred Wassermann\n\n    JessieCode is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JessieCode is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JessieCode. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true, window: true, console: true, self: true, document: true, parser: true*/\n/*jslint nomen: true, plusplus: true*/\n/*eslint eqeqeq: \"off\"*/\n\n/**\n * @fileoverview Here, the computer algebra algorithms are implemented.\n */\n\nimport JXG from \"../jxg.js\";\nimport Type from \"../utils/type.js\";\n// import Const from \"../base/constants.js\";\n// import Text from \"../base/text.js\";\n// import Mat from \"../math/math.js\";\n// import Geometry from \"../math/geometry.js\";\n// import Statistics from \"../math/statistics.js\";\n// import Env from \"../utils/env.js\";\n\n/**\n * A JessieCode object provides an interface to the parser and stores all variables and objects used within a JessieCode script.\n * The optional argument <tt>code</tt> is interpreted after initializing. To evaluate more code after initializing a JessieCode instance\n * please use {@link JXG.JessieCode#parse}. For code snippets like single expressions use {@link JXG.JessieCode#snippet}.\n * @constructor\n * @param {String} [code] Code to parse.\n * @param {Boolean} [geonext=false] Geonext compatibility mode.\n */\nJXG.CA = function (node, createNode, parser) {\n    this.node = node;\n    this.createNode = createNode;\n    this.parser = parser;\n};\n\nJXG.extend(\n    JXG.CA.prototype,\n    /** @lends JXG.CA.prototype */ {\n        findMapNode: function (mapname, node) {\n            var i, len, ret;\n\n            //console.log(\"FINDMAP\", node);\n            if (node.value === \"op_assign\" && node.children[0].value === mapname) {\n                return node.children[1];\n            } else if (node.children) {\n                len = node.children.length;\n                for (i = 0; i < len; ++i) {\n                    ret = this.findMapNode(mapname, node.children[i]);\n                    if (ret !== null) {\n                        return ret;\n                    }\n                }\n            }\n            return null;\n        },\n\n        /**\n         * Declare all subnodes as math nodes,\n         * i.e recursively set node.isMath = true;\n         */\n        setMath: function (node) {\n            var i, len;\n\n            if (\n                (node.type == \"node_op\" &&\n                    (node.value == \"op_add\" ||\n                        node.value == \"op_sub\" ||\n                        node.value == \"op_mul\" ||\n                        node.value == \"op_div\" ||\n                        node.value == \"op_neg\" ||\n                        node.value == \"op_execfun\" ||\n                        node.value == \"op_exp\")) ||\n                node.type == \"node_var\" ||\n                node.type == \"node_const\"\n            ) {\n                node.isMath = true;\n            }\n            if (node.children) {\n                len = node.children.length;\n                for (i = 0; i < len; ++i) {\n                    this.setMath(node.children[i]);\n                }\n            }\n        },\n\n        deriveElementary: function (node, varname) {\n            var fun = node.children[0].value,\n                arg = node.children[1],\n                newNode;\n\n            switch (fun) {\n                case \"abs\":\n                    // x / sqrt(x * x)\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_div\",\n                        arg[0],\n                        this.createNode(\n                            \"node_op\",\n                            \"op_execfun\",\n                            this.createNode(\"node_var\", \"sqrt\"),\n                            [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_mul\",\n                                    Type.deepCopy(arg[0]),\n                                    Type.deepCopy(arg[0])\n                                )\n                            ]\n                        )\n                    );\n                    break;\n\n                case \"sqrt\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_div\",\n                        this.createNode(\"node_const\", 1.0),\n                        this.createNode(\n                            \"node_op\",\n                            \"op_mul\",\n                            this.createNode(\"node_const\", 2.0),\n                            this.createNode(\n                                node.type,\n                                node.value,\n                                Type.deepCopy(node.children[0]),\n                                Type.deepCopy(node.children[1])\n                            )\n                        )\n                    );\n                    break;\n\n                case \"sin\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_execfun\",\n                        this.createNode(\"node_var\", \"cos\"),\n                        Type.deepCopy(arg)\n                    );\n                    break;\n\n                case \"cos\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_neg\",\n                        this.createNode(\n                            \"node_op\",\n                            \"op_execfun\",\n                            this.createNode(\"node_var\", \"sin\"),\n                            Type.deepCopy(arg)\n                        )\n                    );\n                    break;\n\n                case \"tan\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_div\",\n                        this.createNode(\"node_const\", 1.0),\n                        this.createNode(\n                            \"node_op\",\n                            \"op_exp\",\n                            this.createNode(\n                                \"node_op\",\n                                \"op_execfun\",\n                                this.createNode(\"node_var\", \"cos\"),\n                                Type.deepCopy(arg)\n                            ),\n                            this.createNode(\"node_const\", 2)\n                        )\n                    );\n                    break;\n\n                case \"cot\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_neg\",\n                        this.createNode(\n                            \"node_op\",\n                            \"op_div\",\n                            this.createNode(\"node_const\", 1.0),\n                            this.createNode(\n                                \"node_op\",\n                                \"op_exp\",\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_execfun\",\n                                    this.createNode(\"node_var\", \"sin\"),\n                                    Type.deepCopy(arg)\n                                ),\n                                this.createNode(\"node_const\", 2)\n                            )\n                        )\n                    );\n                    break;\n\n                case \"exp\":\n                    newNode = this.createNode(\n                        node.type,\n                        node.value,\n                        Type.deepCopy(node.children[0]),\n                        Type.deepCopy(node.children[1])\n                    );\n                    break;\n\n                case \"pow\":\n                    // (f^g)' = f^g*(f'g/f + g' log(f))\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_mul\",\n                        this.createNode(\n                            \"node_op\",\n                            \"op_execfun\",\n                            Type.deepCopy(node.children[0]),\n                            Type.deepCopy(node.children[1])\n                        ),\n                        this.createNode(\n                            \"node_op\",\n                            \"op_add\",\n                            this.createNode(\n                                \"node_op\",\n                                \"op_mul\",\n                                this.derivative(node.children[1][0], varname),\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_div\",\n                                    Type.deepCopy(node.children[1][1]),\n                                    Type.deepCopy(node.children[1][0])\n                                )\n                            ),\n                            this.createNode(\n                                \"node_op\",\n                                \"op_mul\",\n                                this.derivative(node.children[1][1], varname),\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_execfun\",\n                                    this.createNode(\"node_var\", \"log\"),\n                                    [Type.deepCopy(node.children[1][0])]\n                                )\n                            )\n                        )\n                    );\n                    break;\n\n                case \"log\":\n                case \"ln\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_div\",\n                        this.createNode(\"node_const\", 1.0),\n                        // Attention: single variable mode\n                        Type.deepCopy(arg[0])\n                    );\n                    break;\n\n                case \"log2\":\n                case \"lb\":\n                case \"ld\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_mul\",\n                        this.createNode(\n                            \"node_op\",\n                            \"op_div\",\n                            this.createNode(\"node_const\", 1.0),\n                            // Attention: single variable mode\n                            Type.deepCopy(arg[0])\n                        ),\n                        this.createNode(\"node_const\", 1.4426950408889634) // 1/log(2)\n                    );\n                    break;\n\n                case \"log10\":\n                case \"lg\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_mul\",\n                        this.createNode(\n                            \"node_op\",\n                            \"op_div\",\n                            this.createNode(\"node_const\", 1.0),\n                            // Attention: single variable mode\n                            Type.deepCopy(arg[0])\n                        ),\n                        this.createNode(\"node_const\", 0.43429448190325176) // 1/log(10)\n                    );\n                    break;\n\n                case \"asin\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_div\",\n                        this.createNode(\"node_const\", 1.0),\n                        this.createNode(\n                            \"node_op\",\n                            \"op_execfun\",\n                            this.createNode(\"node_var\", \"sqrt\"),\n                            [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_sub\",\n                                    this.createNode(\"node_const\", 1.0),\n                                    this.createNode(\n                                        \"node_op\",\n                                        \"op_mul\",\n                                        Type.deepCopy(arg[0]),\n                                        Type.deepCopy(arg[0])\n                                    )\n                                )\n                            ]\n                        )\n                    );\n                    break;\n\n                case \"acos\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_neg\",\n                        this.createNode(\n                            \"node_op\",\n                            \"op_div\",\n                            this.createNode(\"node_const\", 1.0),\n                            this.createNode(\n                                \"node_op\",\n                                \"op_execfun\",\n                                this.createNode(\"node_var\", \"sqrt\"),\n                                [\n                                    this.createNode(\n                                        \"node_op\",\n                                        \"op_sub\",\n                                        this.createNode(\"node_const\", 1.0),\n                                        this.createNode(\n                                            \"node_op\",\n                                            \"op_mul\",\n                                            Type.deepCopy(arg[0]),\n                                            Type.deepCopy(arg[0])\n                                        )\n                                    )\n                                ]\n                            )\n                        )\n                    );\n                    break;\n\n                //case 'atan2':\n\n                case \"atan\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_div\",\n                        this.createNode(\"node_const\", 1.0),\n                        this.createNode(\n                            \"node_op\",\n                            \"op_add\",\n                            this.createNode(\"node_const\", 1.0),\n                            this.createNode(\n                                \"node_op\",\n                                \"op_mul\",\n                                Type.deepCopy(arg[0]),\n                                Type.deepCopy(arg[0])\n                            )\n                        )\n                    );\n                    break;\n\n                case \"acot\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_neg\",\n                        this.createNode(\n                            \"node_op\",\n                            \"op_div\",\n                            this.createNode(\"node_const\", 1.0),\n                            this.createNode(\n                                \"node_op\",\n                                \"op_add\",\n                                this.createNode(\"node_const\", 1.0),\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_mul\",\n                                    Type.deepCopy(arg[0]),\n                                    Type.deepCopy(arg[0])\n                                )\n                            )\n                        )\n                    );\n                    break;\n\n                case \"sinh\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_execfun\",\n                        this.createNode(\"node_var\", \"cosh\"),\n                        [Type.deepCopy(arg[0])]\n                    );\n                    break;\n\n                case \"cosh\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_execfun\",\n                        this.createNode(\"node_var\", \"sinh\"),\n                        [Type.deepCopy(arg[0])]\n                    );\n                    break;\n\n                case \"tanh\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_sub\",\n                        this.createNode(\"node_const\", 1.0),\n                        this.createNode(\n                            \"node_op\",\n                            \"op_exp\",\n                            this.createNode(\n                                \"node_op\",\n                                \"op_execfun\",\n                                this.createNode(\"node_var\", \"tanh\"),\n                                [Type.deepCopy(arg[0])]\n                            ),\n                            this.createNode(\"node_const\", 2.0)\n                        )\n                    );\n                    break;\n\n                case \"asinh\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_div\",\n                        this.createNode(\"node_const\", 1.0),\n                        this.createNode(\n                            \"node_op\",\n                            \"op_execfun\",\n                            this.createNode(\"node_var\", \"sqrt\"),\n                            [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_add\",\n                                    this.createNode(\n                                        \"node_op\",\n                                        \"op_mul\",\n                                        Type.deepCopy(arg[0]),\n                                        Type.deepCopy(arg[0])\n                                    ),\n                                    this.createNode(\"node_const\", 1.0)\n                                )\n                            ]\n                        )\n                    );\n                    break;\n\n                case \"acosh\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_div\",\n                        this.createNode(\"node_const\", 1.0),\n                        this.createNode(\n                            \"node_op\",\n                            \"op_execfun\",\n                            this.createNode(\"node_var\", \"sqrt\"),\n                            [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_sub\",\n                                    this.createNode(\n                                        \"node_op\",\n                                        \"op_mul\",\n                                        Type.deepCopy(arg[0]),\n                                        Type.deepCopy(arg[0])\n                                    ),\n                                    this.createNode(\"node_const\", 1.0)\n                                )\n                            ]\n                        )\n                    );\n                    break;\n\n                case \"atanh\":\n                    newNode = this.createNode(\n                        \"node_op\",\n                        \"op_div\",\n                        this.createNode(\"node_const\", 1.0),\n                        this.createNode(\n                            \"node_op\",\n                            \"op_sub\",\n                            this.createNode(\"node_const\", 1.0),\n                            this.createNode(\n                                \"node_op\",\n                                \"op_mul\",\n                                Type.deepCopy(arg[0]),\n                                Type.deepCopy(arg[0])\n                            )\n                        )\n                    );\n                    break;\n\n                default:\n                    newNode = this.createNode(\"node_const\", 0.0);\n                    console.log('Derivative of \"' + fun + '\" not yet implemented');\n                    throw new Error(\"Error(\" + this.line + \"): \");\n                //  this._error('Derivative of \"' + fun + '\" not yet implemented');\n            }\n\n            return newNode;\n        },\n\n        derivative: function (node, varname) {\n            var newNode;\n\n            switch (node.type) {\n                case \"node_op\":\n                    switch (node.value) {\n                        /*\n                        case 'op_map':\n                            if (true) {\n                                newNode = this.createNode('node_op', 'op_map',\n                                        Type.deepCopy(node.children[0]),\n                                        this.derivative(node.children[1], varname)\n                                    );\n                            } else {\n                                newNode = this.derivative(node.children[1], varname);\n                            }\n                            break;\n                        */\n                        case \"op_execfun\":\n                            // f'(g(x))g'(x)\n                            if (node.children[0].value == \"pow\") {\n                                newNode = this.deriveElementary(node, varname);\n                            } else {\n                                if (node.children[1].length === 0) {\n                                    newNode = this.createNode(\"node_const\", 0.0);\n                                } else {\n                                    newNode = this.createNode(\n                                        \"node_op\",\n                                        \"op_mul\",\n                                        this.deriveElementary(node, varname),\n                                        // Warning: single variable mode\n                                        this.derivative(node.children[1][0], varname)\n                                    );\n                                }\n                            }\n                            break;\n\n                        case \"op_div\":\n                            // (f'g − g'f )/(g*g)\n                            newNode = this.createNode(\n                                \"node_op\",\n                                \"op_div\",\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_sub\",\n                                    this.createNode(\n                                        \"node_op\",\n                                        \"op_mul\",\n                                        this.derivative(node.children[0], varname),\n                                        Type.deepCopy(node.children[1])\n                                    ),\n                                    this.createNode(\n                                        \"node_op\",\n                                        \"op_mul\",\n                                        Type.deepCopy(node.children[0]),\n                                        this.derivative(node.children[1], varname)\n                                    )\n                                ),\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_mul\",\n                                    Type.deepCopy(node.children[1]),\n                                    Type.deepCopy(node.children[1])\n                                )\n                            );\n                            break;\n\n                        case \"op_mul\":\n                            // fg' + f'g\n                            newNode = this.createNode(\n                                \"node_op\",\n                                \"op_add\",\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_mul\",\n                                    Type.deepCopy(node.children[0]),\n                                    this.derivative(node.children[1], varname)\n                                ),\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_mul\",\n                                    this.derivative(node.children[0], varname),\n                                    Type.deepCopy(node.children[1])\n                                )\n                            );\n                            break;\n\n                        case \"op_neg\":\n                            newNode = this.createNode(\n                                \"node_op\",\n                                \"op_neg\",\n                                this.derivative(node.children[0], varname)\n                            );\n                            break;\n\n                        case \"op_add\":\n                        case \"op_sub\":\n                            newNode = this.createNode(\n                                \"node_op\",\n                                node.value,\n                                this.derivative(node.children[0], varname),\n                                this.derivative(node.children[1], varname)\n                            );\n                            break;\n\n                        case \"op_exp\":\n                            // (f^g)' = f^g*(f'g/f + g' log(f))\n                            newNode = this.createNode(\n                                \"node_op\",\n                                \"op_mul\",\n                                Type.deepCopy(node),\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_add\",\n                                    this.createNode(\n                                        \"node_op\",\n                                        \"op_mul\",\n                                        this.derivative(node.children[0], varname),\n                                        this.createNode(\n                                            \"node_op\",\n                                            \"op_div\",\n                                            Type.deepCopy(node.children[1]),\n                                            Type.deepCopy(node.children[0])\n                                        )\n                                    ),\n                                    this.createNode(\n                                        \"node_op\",\n                                        \"op_mul\",\n                                        this.derivative(node.children[1], varname),\n                                        this.createNode(\n                                            \"node_op\",\n                                            \"op_execfun\",\n                                            this.createNode(\"node_var\", \"log\"),\n                                            [Type.deepCopy(node.children[0])]\n                                        )\n                                    )\n                                )\n                            );\n                            break;\n                    }\n                    break;\n\n                case \"node_var\":\n                    //console.log('node_var', node);\n                    if (node.value === varname) {\n                        newNode = this.createNode(\"node_const\", 1.0);\n                    } else {\n                        newNode = this.createNode(\"node_const\", 0.0);\n                    }\n                    break;\n\n                case \"node_const\":\n                    newNode = this.createNode(\"node_const\", 0.0);\n                    break;\n\n                case \"node_const_bool\":\n                    break;\n\n                case \"node_str\":\n                    break;\n            }\n\n            return newNode;\n        },\n\n        /**\n         * f = map (x) -> x*sin(x);\n         * Usages:\n         *   h = D(f, x);\n         *   h = map (x) -> D(f, x);\n         * or\n         *   D(x^2, x);\n         */\n        expandDerivatives: function (node, parent, ast) {\n            var len, i, j, mapNode, codeNode,\n                ret, node2, newNode, mapName,\n                varname, vArray, order, isMap;\n\n            ret = 0;\n            if (!node) {\n                return ret;\n            }\n\n            this.line = node.line;\n            this.col = node.col;\n\n            // First we have to go down in the tree.\n            // This ensures that in cases like D(D(f,x),x) the inner D is expanded first.\n            len = node.children.length;\n            for (i = 0; i < len; ++i) {\n                if (node.children[i] && node.children[i].type) {\n                    node.children[i] = this.expandDerivatives(node.children[i], node, ast);\n                } else if (Type.isArray(node.children[i])) {\n                    for (j = 0; j < node.children[i].length; ++j) {\n                        if (node.children[i][j] && node.children[i][j].type) {\n                            node.children[i][j] = this.expandDerivatives(\n                                node.children[i][j],\n                                node,\n                                ast\n                            );\n                        }\n                    }\n                }\n            }\n\n            switch (node.type) {\n                case \"node_op\":\n                    switch (node.value) {\n                        case \"op_execfun\":\n                            if (node.children[0] && node.children[0].value === \"D\") {\n                                /*\n                                 * Distinguish the cases:\n                                 *   D(f, x) where f is map -> isMap = true\n                                 * and\n                                 *   D(2*x, x), D(sin(x), x), ...  -> isMap = false\n                                 */\n                                isMap = false;\n                                if (node.children[1][0].type == \"node_var\") {\n                                    mapName = node.children[1][0].value;\n                                    mapNode = this.findMapNode(mapName, ast);\n                                    if (mapNode !== null) {\n                                        isMap = true;\n                                    }\n                                }\n\n                                if (isMap) {\n                                    /*\n                                     * Derivative of map, that is compute D(f,x)\n                                     * where e.g. f = map (x) -> x^2\n                                     *\n                                     * First step: find node where the map is defined\n                                     */\n                                    // Already done above\n                                    // mapName = node.children[1][0].value;\n                                    // mapNode = this.findMapNode(mapName, ast);\n                                    vArray = mapNode.children[0];\n\n                                    // Variable name for differentiation\n                                    if (node.children[1].length >= 2) {\n                                        varname = node.children[1][1].value;\n                                    } else {\n                                        varname = mapNode.children[0][0]; // Usually it's 'x'\n                                    }\n                                    codeNode = mapNode.children[1];\n                                } else {\n                                    /*\n                                     * Derivative of expression, e.g.\n                                     *     D(2*x, x) or D(sin(x), x)\n                                     */\n                                    codeNode = node.children[1][0];\n                                    vArray = [\"x\"];\n\n                                    // Variable name for differentiation and order\n                                    if (node.children[1].length >= 2) {\n                                        varname = node.children[1][1].value;\n                                    } else {\n                                        varname = \"x\";\n                                    }\n                                }\n\n                                // Differentiation order\n                                if (node.children[1].length >= 3) {\n                                    order = node.children[1][2].value;\n                                } else {\n                                    order = 1;\n                                }\n\n                                // Create node which contains the derivative\n                                newNode = codeNode;\n                                //newNode = this.removeTrivialNodes(newNode);\n                                if (order >= 1) {\n                                    while (order >= 1) {\n                                        newNode = this.derivative(newNode, varname);\n                                        newNode = this.removeTrivialNodes(newNode);\n                                        order--;\n                                    }\n                                }\n\n                                // Replace the node containing e.g. D(f,x) by the derivative.\n                                if (parent.type == \"node_op\" && parent.value == \"op_assign\") {\n                                    // If D is an assignment it has to be replaced by a map\n                                    // h = D(f, x)\n                                    node2 = this.createNode(\n                                        \"node_op\",\n                                        \"op_map\",\n                                        vArray,\n                                        newNode\n                                    );\n                                } else {\n                                    node2 = newNode;\n                                }\n\n                                this.setMath(node2);\n                                node.type = node2.type;\n                                node.value = node2.value;\n                                if (node2.children.length > 0) {\n                                    node.children[0] = node2.children[0];\n                                }\n                                if (node2.children.length > 1) {\n                                    node.children[1] = node2.children[1];\n                                }\n                            }\n                    }\n                    break;\n\n                case \"node_var\":\n                case \"node_const\":\n                case \"node_const_bool\":\n                case \"node_str\":\n                    break;\n            }\n\n            return node;\n        },\n\n        removeTrivialNodes: function (node) {\n            var i, len, n0, n1, swap;\n\n            // In case of 'op_execfun' the children[1] node is an array.\n            if (Type.isArray(node)) {\n                len = node.length;\n                for (i = 0; i < len; ++i) {\n                    node[i] = this.removeTrivialNodes(node[i]);\n                }\n            }\n            if (node.type != \"node_op\" || !node.children) {\n                return node;\n            }\n\n            len = node.children.length;\n            for (i = 0; i < len; ++i) {\n                this.mayNotBeSimplified = false;\n                do {\n                    node.children[i] = this.removeTrivialNodes(node.children[i]);\n                } while (this.mayNotBeSimplified);\n            }\n\n            switch (node.value) {\n                // Allow maps of the form\n                //  map (x) -> x;\n                case \"op_map\":\n                    n0 = node.children[0];\n                    n1 = node.children[1];\n                    if (n1.type == \"node_var\") {\n                        for (i = 0; i < n0.length; ++i) {\n                            // Allow maps of the form map(x) -> x\n                            if (n0[i] == n1.value) {\n                                n1.isMath = true;\n                                break;\n                            }\n                        }\n                    }\n                    break;\n\n                // a + 0 -> a\n                // 0 + a -> a\n                case \"op_add\":\n                    n0 = node.children[0];\n                    n1 = node.children[1];\n                    if (n0.type == \"node_const\" && n0.value === 0.0) {\n                        return n1;\n                    }\n                    if (n1.type == \"node_const\" && n1.value === 0.0) {\n                        return n0;\n                    }\n\n                    // const + const -> const\n                    if (n0.type == \"node_const\" && n1.type == \"node_const\") {\n                        n0.value += n1.value;\n                        return n0;\n                    }\n                    break;\n\n                // 1 * a = a\n                // a * 1 = a\n                // a * 0 = 0\n                // 0 * a = 0\n                // - * - = +\n                // Order children\n                case \"op_mul\":\n                    n0 = node.children[0];\n                    n1 = node.children[1];\n                    if (n0.type == \"node_const\" && n0.value == 1.0) {\n                        return n1;\n                    }\n                    if (n1.type == \"node_const\" && n1.value == 1.0) {\n                        return n0;\n                    }\n                    if (n0.type == \"node_const\" && n0.value === 0.0) {\n                        return n0;\n                    }\n                    if (n1.type == \"node_const\" && n1.value === 0.0) {\n                        return n1;\n                    }\n                    if (n1.type == \"node_const\" && n1.value === 0.0) {\n                        return n1;\n                    }\n\n                    // (-a) * (-b) -> a*b\n                    if (\n                        n0.type == \"node_op\" &&\n                        n0.value == \"op_neg\" &&\n                        n1.type == \"node_op\" &&\n                        n1.value == \"op_neg\"\n                    ) {\n                        node.children = [n0.children[0], n1.children[0]];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n                    // (-a) * b -> -(a*b)\n                    if (n0.value == \"op_neg\" && n1.value != \"op_neg\") {\n                        node.type = \"node_op\";\n                        node.value = \"op_neg\";\n                        node.children = [\n                            this.createNode(\"node_op\", \"op_mul\", n0.children[0], n1)\n                        ];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n                    // a * (-b) -> -(a*b)\n                    if (n0.value != \"op_neg\" && n1.value == \"op_neg\") {\n                        node.type = \"node_op\";\n                        node.value = \"op_neg\";\n                        node.children = [\n                            this.createNode(\"node_op\", \"op_mul\", n0, n1.children[0])\n                        ];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n                    // (1 / a) * b -> a / b\n                    if (\n                        n0.value == \"op_div\" &&\n                        n0.children[0].type == \"node_const\" &&\n                        n0.children[0].value == 1.0\n                    ) {\n                        node.type = \"node_op\";\n                        node.value = \"op_div\";\n                        node.children = [n1, n0.children[1]];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n                    // a * (1 / b) -> a / b\n                    if (\n                        n1.value == \"op_div\" &&\n                        n1.children[0].type == \"node_const\" &&\n                        n1.children[0].value == 1.0\n                    ) {\n                        node.type = \"node_op\";\n                        node.value = \"op_div\";\n                        node.children = [n0, n1.children[1]];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n\n                    // Order children\n                    // a * const -> const * a\n                    if (n0.type != \"node_const\" && n1.type == \"node_const\") {\n                        node.children = [n1, n0];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n                    // a + (-const) -> -const + a\n                    if (\n                        n0.type != \"node_const\" &&\n                        n1.type == \"node_op\" &&\n                        n1.value == \"op_neg\" &&\n                        n1.children[0].type == \"node_const\"\n                    ) {\n                        node.children = [n1, n0];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n\n                    // a * var -> var * a\n                    // a * fun -> fun * a\n                    if (\n                        n0.type == \"node_op\" &&\n                        n0.value != \"op_execfun\" &&\n                        (n1.type == \"node_var\" ||\n                            (n1.type == \"node_op\" && n1.value == \"op_execfun\"))\n                    ) {\n                        node.children = [n1, n0];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n\n                    // a + (-var) -> -var  + a\n                    if (\n                        n0.type != \"node_op\" &&\n                        n1.type == \"node_op\" &&\n                        n1.value == \"op_neg\" &&\n                        n1.children[0].type == \"node_var\"\n                    ) {\n                        node.children = [n1, n0];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n                    // a * (const * b) -> const * (a*b)\n                    // a * (const / b) -> const * (a/b)\n                    if (\n                        n0.type != \"node_const\" &&\n                        n1.type == \"node_op\" &&\n                        (n1.value == \"op_mul\" || n1.value == \"op_div\") &&\n                        n1.children[0].type == \"node_const\"\n                    ) {\n                        swap = n1.children[0];\n                        n1.children[0] = n0;\n                        node.children = [swap, n1];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n\n                    // (const * a) * b -> const * (a * b)\n                    if (\n                        n1.type != \"node_const\" &&\n                        n0.type == \"node_op\" &&\n                        n0.value == \"op_mul\" &&\n                        n0.children[0].type == \"node_const\"\n                    ) {\n                        node.children = [\n                            n0.children[0],\n                            this.createNode(\"node_op\", \"op_mul\", n0.children[1], n1)\n                        ];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n\n                    // const * const -> const\n                    if (n0.type == \"node_const\" && n1.type == \"node_const\") {\n                        n0.value *= n1.value;\n                        return n0;\n                    }\n\n                    // const * (const * a) -> const * a\n                    // const * (const / a) -> const / a\n                    if (\n                        n0.type == \"node_const\" &&\n                        n1.type == \"node_op\" &&\n                        (n1.value == \"op_mul\" || n1.value == \"op_div\") &&\n                        n1.children[0].type == \"node_const\"\n                    ) {\n                        n1.children[0].value *= n0.value;\n                        return n1;\n                    }\n\n                    // a * a-> a^2\n                    n0.hash = this.parser.compile(n0);\n                    n1.hash = this.parser.compile(n1);\n                    if (n0.hash === n1.hash) {\n                        node.value = \"op_exp\";\n                        node.children[1] = this.createNode(\"node_const\", 2.0);\n                        return node;\n                    }\n\n                    if (\n                        n0.type == \"node_const\" &&\n                        n1.type == \"node_op\" &&\n                        (n1.value == \"op_mul\" || n1.value == \"op_div\") &&\n                        n1.children[0].type == \"node_const\"\n                    ) {\n                        n1.children[0].value *= n0.value;\n                        return n1;\n                    }\n\n                    // a * a^b -> a^(b+1)\n                    if (n1.type == \"node_op\" && n1.value == \"op_exp\") {\n                        if (!n0.hash) {\n                            n0.hash = this.parser.compile(n0);\n                        }\n                        if (!n1.children[0].hash) {\n                            n1.children[0].hash = this.parser.compile(n1.children[0]);\n                        }\n                        if (n0.hash === n1.children[0].hash) {\n                            n1.children[1] = this.createNode(\n                                \"node_op\",\n                                \"op_add\",\n                                n1.children[1],\n                                this.createNode(\"node_const\", 1.0)\n                            );\n                            this.mayNotBeSimplified = true;\n                            return n1;\n                        }\n                    }\n\n                    // a^b * a^c -> a^(b+c)\n                    if (\n                        n0.type == \"node_op\" &&\n                        n0.value == \"op_exp\" &&\n                        n1.type == \"node_op\" &&\n                        n1.value == \"op_exp\"\n                    ) {\n                        n0.children[0].hash = this.parser.compile(n0.children[0]);\n                        n1.children[0].hash = this.parser.compile(n1.children[0]);\n                        if (n0.children[0].hash === n1.children[0].hash) {\n                            n0.children[1] = this.createNode(\n                                \"node_op\",\n                                \"op_add\",\n                                n0.children[1],\n                                n1.children[1]\n                            );\n                            this.mayNotBeSimplified = true;\n                            return n0;\n                        }\n                    }\n\n                    break;\n\n                // 0 - a -> -a\n                // a - 0 -> a\n                // a - a -> 0\n                case \"op_sub\":\n                    n0 = node.children[0];\n                    n1 = node.children[1];\n                    if (n0.type == \"node_const\" && n0.value === 0.0) {\n                        node.value = \"op_neg\";\n                        node.children[0] = n1;\n                        return node;\n                    }\n                    if (n1.type == \"node_const\" && n1.value === 0.0) {\n                        return n0;\n                    }\n                    if (\n                        n0.type == \"node_const\" &&\n                        n1.type == \"node_const\" &&\n                        n0.value == n1.value\n                    ) {\n                        return this.createNode(\"node_const\", 0.0);\n                    }\n                    if (\n                        n0.type == \"node_var\" &&\n                        n1.type == \"node_var\" &&\n                        n0.value == n1.value\n                    ) {\n                        return this.createNode(\"node_const\", 0.0);\n                    }\n\n                    // const - const -> const\n                    if (n0.type == \"node_const\" && n1.type == \"node_const\") {\n                        n0.value -= n1.value;\n                        return n0;\n                    }\n\n                    // const * a - const * a -> const * a\n                    if (\n                        n0.type == \"node_op\" &&\n                        n0.value == \"op_mul\" &&\n                        n1.type == \"node_op\" &&\n                        n1.value == \"op_mul\"\n                    ) {\n                        n0.children[1].hash = this.parser.compile(n0.children[1]);\n                        n1.children[1].hash = this.parser.compile(n1.children[1]);\n                        if (n0.children[1].hash === n1.children[1].hash) {\n                            node.value = \"op_mul\";\n                            node.children = [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_sub\",\n                                    n0.children[0],\n                                    n1.children[0]\n                                ),\n                                n0.children[1]\n                            ];\n                            this.mayNotBeSimplified = true;\n                            return node;\n                        }\n                    }\n                    // const * a - a -> (const - 1) * a\n                    if (n0.type == \"node_op\" && n0.value == \"op_mul\") {\n                        n0.children[1].hash = this.parser.compile(n0.children[1]);\n                        n1.hash = this.parser.compile(n1);\n                        if (n0.children[1].hash === n1.hash) {\n                            node.value = \"op_mul\";\n                            node.children = [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_sub\",\n                                    n0.children[0],\n                                    this.createNode(\"node_const\", 1.0)\n                                ),\n                                n1\n                            ];\n                            this.mayNotBeSimplified = true;\n                            return node;\n                        }\n                    }\n                    // a - const*a -> (const - 1) * a\n                    if (n1.type == \"node_op\" && n1.value == \"op_mul\") {\n                        n1.children[1].hash = this.parser.compile(n1.children[1]);\n                        n0.hash = this.parser.compile(n0);\n                        if (n1.children[1].hash === n0.hash) {\n                            node.value = \"op_mul\";\n                            node.children = [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_sub\",\n                                    this.createNode(\"node_const\", 1.0),\n                                    n1.children[0]\n                                ),\n                                n0\n                            ];\n                            this.mayNotBeSimplified = true;\n                            return node;\n                        }\n                    }\n\n                    break;\n\n                // -0 -> 0\n                // -(-b) = b\n                case \"op_neg\":\n                    n0 = node.children[0];\n                    if (n0.type == \"node_const\" && n0.value === 0.0) {\n                        return n0;\n                    }\n                    if (n0.type == \"node_op\" && n0.value == \"op_neg\") {\n                        return n0.children[0];\n                    }\n                    break;\n\n                // a / a -> 1, a != 0\n                // 0 / a -> 0, a != 0\n                // a / 0 -> Infinity, a != 0\n                // 0 / 0 -> NaN, a == 0\n                case \"op_div\":\n                    n0 = node.children[0];\n                    n1 = node.children[1];\n                    if (\n                        n0.type == \"node_const\" &&\n                        n1.type == \"node_const\" &&\n                        n0.value == n1.value &&\n                        n0.value !== 0\n                    ) {\n                        n0.value = 1.0;\n                        return n0;\n                    }\n                    if (\n                        n0.type == \"node_const\" &&\n                        n0.value === 0 &&\n                        n1.type == \"node_const\" &&\n                        n1.value !== 0\n                    ) {\n                        n0.value = 0.0;\n                        return n0;\n                    }\n\n                    // Risky: 0 / (something != 0) -> 0.0\n                    if (\n                        n0.type == \"node_const\" &&\n                        n0.value === 0 &&\n                        (n1.type == \"node_op\" || n1.type == \"node_var\")\n                    ) {\n                        node.type = \"node_const\";\n                        node.value = 0.0;\n                        return node;\n                    }\n\n                    if (\n                        n0.type == \"node_var\" &&\n                        n1.type == \"node_var\" &&\n                        n0.value == n1.value\n                    ) {\n                        return this.createNode(\"node_const\", 1.0);\n                    }\n                    if (\n                        n0.type == \"node_const\" &&\n                        n0.value !== 0 &&\n                        n1.type == \"node_const\" &&\n                        n1.value === 0\n                    ) {\n                        if (n0.value > 0.0) {\n                            n0.value = Infinity;\n                        } else {\n                            n0.value = -Infinity; // Do we ever need this?\n                        }\n                        return n0;\n                    }\n\n                    // (-a) / (-b) -> a/b\n                    if (\n                        n0.type == \"node_op\" &&\n                        n0.value == \"op_neg\" &&\n                        n1.type == \"node_op\" &&\n                        n1.value == \"op_neg\"\n                    ) {\n                        node.children = [n0.children[0], n1.children[0]];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n                    // (-a) / b -> -(a/b)\n                    if (n0.value == \"op_neg\" && n1.value != \"op_neg\") {\n                        node.type = \"node_op\";\n                        node.value = \"op_neg\";\n                        node.children = [\n                            this.createNode(\"node_op\", \"op_div\", n0.children[0], n1)\n                        ];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n                    // a / (-b) -> -(a/b)\n                    if (n0.value != \"op_neg\" && n1.value == \"op_neg\") {\n                        node.type = \"node_op\";\n                        node.value = \"op_neg\";\n                        node.children = [\n                            this.createNode(\"node_op\", \"op_div\", n0, n1.children[0])\n                        ];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n\n                    // a^b / a -> a^(b-1)\n                    if (n0.type == \"node_op\" && n0.value == \"op_exp\") {\n                        if (!n1.hash) {\n                            n1.hash = this.parser.compile(n1);\n                        }\n                        if (!n0.children[0].hash) {\n                            n0.children[0].hash = this.parser.compile(n0.children[0]);\n                        }\n                        if (n1.hash === n0.children[0].hash) {\n                            n0.children[1] = this.createNode(\n                                \"node_op\",\n                                \"op_sub\",\n                                n0.children[1],\n                                this.createNode(\"node_const\", 1.0)\n                            );\n                            this.mayNotBeSimplified = true;\n                            return n0;\n                        }\n                    }\n\n                    // (const * a) / b -> const * (a / b)\n                    if (\n                        n1.type != \"node_const\" &&\n                        n0.type == \"node_op\" &&\n                        n0.value == \"op_mul\" &&\n                        n0.children[0].type == \"node_const\"\n                    ) {\n                        node.value = \"op_mul\";\n                        node.children = [\n                            n0.children[0],\n                            this.createNode(\"node_op\", \"op_div\", n0.children[1], n1)\n                        ];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n\n                    // a^b / a^c -> a^(b-c)\n                    if (\n                        n0.type == \"node_op\" &&\n                        n0.value == \"op_exp\" &&\n                        n1.type == \"node_op\" &&\n                        n1.value == \"op_exp\"\n                    ) {\n                        n0.children[0].hash = this.parser.compile(n0.children[0]);\n                        n1.children[0].hash = this.parser.compile(n1.children[0]);\n                        if (n0.children[0].hash === n1.children[0].hash) {\n                            n0.children[1] = this.createNode(\n                                \"node_op\",\n                                \"op_sub\",\n                                n0.children[1],\n                                n1.children[1]\n                            );\n                            this.mayNotBeSimplified = true;\n                            return n0;\n                        }\n                    }\n\n                    break;\n\n                // a^0 = 1\n                // a^1 -> a\n                // 1^a -> 1\n                // 0^a -> 0: a const != 0\n                case \"op_exp\":\n                    n0 = node.children[0];\n                    n1 = node.children[1];\n                    if (n1.type == \"node_const\" && n1.value === 0.0) {\n                        n1.value = 1.0;\n                        return n1;\n                    }\n                    if (n1.type == \"node_const\" && n1.value == 1.0) {\n                        return n0;\n                    }\n                    if (n0.type == \"node_const\" && n0.value == 1.0) {\n                        return n0;\n                    }\n                    if (\n                        n0.type == \"node_const\" &&\n                        n0.value === 0.0 &&\n                        n1.type == \"node_const\" &&\n                        n1.value !== 0.0\n                    ) {\n                        return n0;\n                    }\n\n                    // (a^b)^c -> a^(b*c)\n                    if (n0.type == \"node_op\" && n0.value == \"op_exp\") {\n                        node.children = [\n                            n0.children[0],\n                            this.createNode(\"node_op\", \"op_mul\", n0.children[1], n1)\n                        ];\n                        return node;\n                    }\n                    break;\n            }\n\n            switch (node.value) {\n                // const_1 + const_2 -> (const_1 + const_2)\n                // a + a -> 2*a\n                // a + (-b) = a - b\n                case \"op_add\":\n                    n0 = node.children[0];\n                    n1 = node.children[1];\n                    if (\n                        n0.type == \"node_const\" &&\n                        n1.type == \"node_const\" &&\n                        n0.value == n1.value\n                    ) {\n                        n0.value += n1.value;\n                        return n0;\n                    }\n\n                    if (\n                        n0.type == \"node_var\" &&\n                        n1.type == \"node_var\" &&\n                        n0.value == n1.value\n                    ) {\n                        node.children[0] = this.createNode(\"node_const\", 2.0);\n                        node.value = \"op_mul\";\n                        return node;\n                    }\n\n                    if (n0.type == \"node_op\" && n0.value == \"op_neg\") {\n                        node.value = \"op_sub\";\n                        node.children[0] = n1;\n                        node.children[1] = n0.children[0];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n\n                    if (n1.type == \"node_op\" && n1.value == \"op_neg\") {\n                        node.value = \"op_sub\";\n                        node.children[1] = n1.children[0];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n\n                    // const * a + const * a -> const * a\n                    if (\n                        n0.type == \"node_op\" &&\n                        n0.value == \"op_mul\" &&\n                        n1.type == \"node_op\" &&\n                        n1.value == \"op_mul\"\n                    ) {\n                        n0.children[1].hash = this.parser.compile(n0.children[1]);\n                        n1.children[1].hash = this.parser.compile(n1.children[1]);\n                        if (n0.children[1].hash === n1.children[1].hash) {\n                            node.value = \"op_mul\";\n                            node.children = [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_add\",\n                                    n0.children[0],\n                                    n1.children[0]\n                                ),\n                                n0.children[1]\n                            ];\n                            this.mayNotBeSimplified = true;\n                            return node;\n                        }\n                    }\n                    // const * a + a -> (const + 1) * a\n                    if (n0.type == \"node_op\" && n0.value == \"op_mul\") {\n                        n0.children[1].hash = this.parser.compile(n0.children[1]);\n                        n1.hash = this.parser.compile(n1);\n                        if (n0.children[1].hash === n1.hash) {\n                            node.value = \"op_mul\";\n                            node.children = [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_add\",\n                                    n0.children[0],\n                                    this.createNode(\"node_const\", 1.0)\n                                ),\n                                n1\n                            ];\n                            this.mayNotBeSimplified = true;\n                            return node;\n                        }\n                    }\n                    // a + const*a -> (const + 1) * a\n                    if (n1.type == \"node_op\" && n1.value == \"op_mul\") {\n                        n1.children[1].hash = this.parser.compile(n1.children[1]);\n                        n0.hash = this.parser.compile(n0);\n                        if (n1.children[1].hash === n0.hash) {\n                            node.value = \"op_mul\";\n                            node.children = [\n                                this.createNode(\n                                    \"node_op\",\n                                    \"op_add\",\n                                    this.createNode(\"node_const\", 1.0),\n                                    n1.children[0]\n                                ),\n                                n0\n                            ];\n                            this.mayNotBeSimplified = true;\n                            return node;\n                        }\n                    }\n\n                    break;\n\n                // a - (-b) = a + b\n                case \"op_sub\":\n                    n0 = node.children[0];\n                    n1 = node.children[1];\n                    if (n1.type == \"node_op\" && n1.value == \"op_neg\") {\n                        node.value = \"op_add\";\n                        node.children[1] = n1.children[0];\n                        this.mayNotBeSimplified = true;\n                        return node;\n                    }\n                    break;\n\n                case \"op_execfun\":\n                    return this.simplifyElementary(node);\n            }\n\n            return node;\n        },\n\n        simplifyElementary: function (node) {\n            var fun = node.children[0].value,\n                arg = node.children[1];\n\n            // Catch errors of the form sin()\n            if (arg.length == 0) {\n                return node;\n            }\n\n            switch (fun) {\n                // sin(0) -> 0\n                // sin(PI) -> 0\n                // sin (int * PI) -> 0\n                // sin (PI * int) -> 0\n                // Same for tan()\n                case \"sin\":\n                case \"tan\":\n                    if (arg[0].type == \"node_const\" && arg[0].value === 0) {\n                        node.type = \"node_const\";\n                        node.value = 0.0;\n                        return node;\n                    }\n                    if (arg[0].type == \"node_var\" && arg[0].value == \"PI\") {\n                        node.type = \"node_const\";\n                        node.value = 0.0;\n                        return node;\n                    }\n                    if (\n                        arg[0].type == \"node_op\" &&\n                        arg[0].value == \"op_mul\" &&\n                        arg[0].children[0].type == \"node_const\" &&\n                        arg[0].children[0].value % 1 === 0 &&\n                        arg[0].children[1].type == \"node_var\" &&\n                        arg[0].children[1].value == \"PI\"\n                    ) {\n                        node.type = \"node_const\";\n                        node.value = 0.0;\n                        return node;\n                    }\n                    break;\n\n                // cos(0) -> 1.0\n                // cos(PI) -> -1.0\n                // cos(int * PI) -> +/- 1.0\n                // cos(PI * int) -> +/- 1.0\n                case \"cos\":\n                    if (arg[0].type == \"node_const\" && arg[0].value === 0) {\n                        node.type = \"node_const\";\n                        node.value = 1.0;\n                        return node;\n                    }\n                    if (arg[0].type == \"node_var\" && arg[0].value == \"PI\") {\n                        node.type = \"node_op\";\n                        node.value = \"op_neg\";\n                        node.children = [this.createNode(\"node_const\", 1.0)];\n                        return node;\n                    }\n                    /*\n                    if (arg[0].type == 'node_op' && arg[0].value == 'op_mul' &&\n                        ((arg[0].children[0].type == 'node_const' && arg[0].children[0].value % 1 === 0 &&\n                         arg[0].children[1].type == 'node_var' && arg[0].children[1].value == 'PI') ||\n                         (arg[0].children[1].type == 'node_const' && arg[0].children[1].value % 1 === 0 &&\n                          arg[0].children[0].type == 'node_var' && arg[0].children[0].value == 'PI'))) {\n                        node.type = 'node_const';\n                        node.value = 1.0;\n                        return node;\n                    }\n                    */\n                    break;\n\n                // exp(0) -> 1\n                case \"exp\":\n                    if (arg[0].type == \"node_const\" && arg[0].value === 0) {\n                        node.type = \"node_const\";\n                        node.value = 1.0;\n                        return node;\n                    }\n                    break;\n\n                // pow(a, 0) -> 1\n                case \"pow\":\n                    if (arg[1].type == \"node_const\" && arg[1].value === 0) {\n                        node.type = \"node_const\";\n                        node.value = 1.0;\n                        return node;\n                    }\n                    break;\n            }\n\n            return node;\n        }\n    }\n);\n\nexport default JXG.CA;\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 9454, "column": 0}, "map": {"version":3,"sources":["file:///Users/kristynacoufalova/Documents/geometry_review/node_modules/jsxgraph/src/parser/3dmodels.js"],"sourcesContent":["/*\n    Copyright 2008-2025\n        Matthias Ehmann,\n        Carsten Miller,\n        Andreas Walter,\n        Alfred Wassermann\n\n    This file is part of JSXGraph.\n\n    JSXGraph is free software dual licensed under the GNU LGPL or MIT License.\n\n    You can redistribute it and/or modify it under the terms of the\n\n      * GNU Lesser General Public License as published by\n        the Free Software Foundation, either version 3 of the License, or\n        (at your option) any later version\n      OR\n      * MIT License: https://github.com/jsxgraph/jsxgraph/blob/master/LICENSE.MIT\n\n    JSXGraph is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License and\n    the MIT License along with JSXGraph. If not, see <https://www.gnu.org/licenses/>\n    and <https://opensource.org/licenses/MIT/>.\n */\n\n/*global JXG: true, define: true, Float32Array: true */\n/*jslint nomen: true, plusplus: true, bitwise: true*/\n\n/**\n * @fileoverview In this file the namespace JXG.Parse3D is defined.\n */\nimport JXG from \"../jxg.js\";\n// import Type from \"../utils/type.js\";\n\n/**\n * Namespace Parse3D. Contains parsers for 3D models like STL.\n * @namespace\n */\nJXG.Parse3D = {\n\n    /**\n     * Parser for the ASCII STL format, see https://en.wikipedia.org/wiki/STL_(file_format).\n     * STL stands for stereo-lithography.\n     *\n     * @param {String} str String containing STL file format\n     * @returns {Array} [[vertices, faces], ...] as list of polyhedra. Each entry is the input for a polyhedron3d.\n     * @example\n     *         const board = JXG.JSXGraph.initBoard(\n     *             'jxgbox',\n     *             {\n     *                 boundingbox: [-8, 8, 8, -8],\n     *                 minimizeReflow: 'svg',\n     *                 axis: false,\n     *                 showNavigation: false,\n     *                 zoom: {\n     *                     enabled: false\n     *                 },\n     *                 pan: {\n     *                     enabled: false\n     *                 }\n     *             }\n     *         );\n     *\n     *         var bound = [-1, 2];\n     *         var view = board.create(\n     *             'view3d',\n     *             [[-5, -3], [8, 8],\n     *             [bound, bound, bound]],\n     *             {\n     * \t            axesPosition: 'none',\n     *                 projection: 'central',\n     *                 trackball: { enabled: true },\n     *                 depthOrder: { enabled: true },\n     *                 xPlaneRear: { visible: false },\n     *                 yPlaneRear: { visible: false },\n     *                 zPlaneRear: { fillOpacity: 0.2, visible: true },\n     *                 az: {\n     *                     slider: {\n     *                         visible: true,\n     *                         start: 1.54\n     *                     }\n     *                 }\n     *\n     *             }\n     *         );\n     *\n     *  // Tetrahedron\n     *  var model = `solid m\n     *  facet normal 0 0 0\n     *    outer loop\n     *      vertex 0 0 0\n     *      vertex 1 0 0\n     *      vertex 1 1 0\n     *    endloop\n     *   endfacet\n     *  facet normal 0 0 0\n     *    outer loop\n     *      vertex 0 0 0\n     *      vertex 1 0 0\n     *      vertex 0.5 0.5 1\n     *    endloop\n     *   endfacet\n     *  facet normal 0 0 0\n     *    outer loop\n     *      vertex 0 0 0\n     *      vertex 1 1 0\n     *      vertex 0.5 0.5 1\n     *    endloop\n     *   endfacet\n     *  facet normal 0 0 0\n     *    outer loop\n     *      vertex 1 0 0\n     *      vertex 1 1 0\n     *      vertex 0.5 0.5 1\n     *    endloop\n     *   endfacet\n     * endsolid m`;\n     *\n     * var m = JXG.Parse3D.STL(model);\n     *\n     *  for (let i = 0; i < m.length; i++) {\n     *      view.create('polyhedron3d', m[i], {\n     *           fillColorArray: [], // ['yellow', 'red', 'green', 'blue'],\n     *           layer: 12,\n     *           strokeWidth: 0,\n     *           shader: {\n     *               enabled: true,\n     *               type: 'angle',\n     *               hue: 0 + 60 * i,\n     *               saturation: 90,\n     *               minlightness: 60,\n     *               maxLightness: 80\n     *           },\n     *           fillOpacity: 0.8\n     *       });\n     *   }\n     *\n     * </pre><div id=\"JXG8fa8ce22-3613-452f-9775-69588a1c1e34\" class=\"jxgbox\" style=\"width: 300px; height: 300px;\"></div>\n     * <script type=\"text/javascript\">\n     *     (function() {\n     *         var board = JXG.JSXGraph.initBoard('JXG8fa8ce22-3613-452f-9775-69588a1c1e34', {\n     *                     showcopyright: false, shownavigation: false,\n     *                     boundingbox: [-8, 8, 8, -8],\n     *                     minimizeReflow: 'svg',\n     *                     axis: false,\n     *                     showNavigation: false,\n     *                     zoom: {\n     *                         enabled: false\n     *                     },\n     *                     pan: {\n     *                         enabled: false\n     *                     }\n     *                 }\n     *             );\n     *\n     *             var bound = [-1, 2]; // Tetrahedron\n     *             var view = board.create(\n     *                 'view3d',\n     *                 [[-5, -3], [8, 8],\n     *                 [bound, bound, bound]],\n     *                 {\n     *     \t               axesPosition: 'none',\n     *                     projection: 'central',\n     *                     trackball: { enabled: true },\n     *                     depthOrder: { enabled: true },\n     *                     xPlaneRear: { visible: false },\n     *                     yPlaneRear: { visible: false },\n     *                     zPlaneRear: { fillOpacity: 0.2, visible: true },\n     *                     az: {\n     *                         slider: {\n     *                             visible: true,\n     *                             start: 1.54\n     *                         }\n     *                     }\n     *\n     *                 }\n     *             );\n     *\n     *   // Tetrahedron\n     *   var model = `solid m\n     *      facet normal 0 0 0\n     *        outer loop\n     *          vertex 0 0 0\n     *          vertex 1 0 0\n     *          vertex 1 1 0\n     *        endloop\n     *       endfacet\n     *      facet normal 0 0 0\n     *        outer loop\n     *          vertex 0 0 0\n     *          vertex 1 0 0\n     *          vertex 0.5 0.5 1\n     *        endloop\n     *       endfacet\n     *      facet normal 0 0 0\n     *        outer loop\n     *          vertex 0 0 0\n     *          vertex 1 1 0\n     *          vertex 0.5 0.5 1\n     *        endloop\n     *       endfacet\n     *      facet normal 0 0 0\n     *        outer loop\n     *          vertex 1 0 0\n     *          vertex 1 1 0\n     *          vertex 0.5 0.5 1\n     *        endloop\n     *       endfacet\n     *     endsolid m`;\n     *\n     *             var m = JXG.Parse3D.STL(model);\n     *\n     *  for (let i = 0; i < m.length; i++) {\n     *      view.create('polyhedron3d', m[i], {\n     *           fillColorArray: [], // ['yellow', 'red', 'green', 'blue'],\n     *           layer: 12,\n     *           strokeWidth: 0,\n     *           shader: {\n     *               enabled: true,\n     *               type: 'angle',\n     *               hue: 0 + 60 * i,\n     *               saturation: 90,\n     *               minlightness: 60,\n     *               maxLightness: 80\n     *           },\n     *           fillOpacity: 0.8\n     *       });\n     *   }\n     *     })();\n     *\n     * </script><pre>\n     *\n     */\n    STL: function (str) {\n        var i, j, pos, le,\n            li,\n            lines,\n            coords,\n            face_num, found,\n            polyhedra = [],\n            vertices = [],\n            faces = [];\n\n        lines = str.split('\\n');\n\n        le = lines.length;\n        for (i = 0; i < le; i++) {\n            li = lines[i].trim();\n\n            if (li.indexOf('solid') === 0) {\n                // New model\n                face_num = -1;\n                vertices = [];\n                faces = [];\n            } else if (li.indexOf('endsolid') === 0) {\n                polyhedra.push([vertices.slice(), faces.slice()]);\n                // break;\n            } else if (li.indexOf('facet') === 0) {\n                face_num++;\n                faces.push([]);\n            } else if (li.indexOf('outer loop') === 0 || li.indexOf('endloop') === 0) {\n                continue;\n            } else if (li.indexOf('vertex') === 0) {\n                coords = li.split(' ').slice(1).map((x) => parseFloat(x));\n                found = false;\n                for (j = 0; j < vertices.length; j++) {\n                    if (JXG.Math.Geometry.distance(vertices[j], coords, 3) < JXG.Math.eps) {\n                        // Debug:\n                        // console.log(\"Point already defined\")\n                        found = true;\n                        pos = j;\n                        break;\n                    }\n                }\n                if (found === false) {\n                    pos = vertices.length;\n                    vertices.push(coords);\n                }\n                faces[face_num].push(pos);\n            }\n        }\n        // console.log('v:', vertices.length, 'f:', faces.length)\n\n        // return [vertices, faces];\n        return polyhedra;\n    }\n\n};\n\n\nexport default JXG.Parse3D;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;CA2BC,GAED,qDAAqD,GACrD,mDAAmD,GAEnD;;CAEC;;;;AACD;;AACA,uCAAuC;AAEvC;;;CAGC,GACD,iLAAG,CAAC,OAAO,GAAG;IAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAgMC,GACD,KAAK,SAAU,GAAG;QACd,IAAI,GAAG,GAAG,KAAK,IACX,IACA,OACA,QACA,UAAU,OACV,YAAY,EAAE,EACd,WAAW,EAAE,EACb,QAAQ,EAAE;QAEd,QAAQ,IAAI,KAAK,CAAC;QAElB,KAAK,MAAM,MAAM;QACjB,IAAK,IAAI,GAAG,IAAI,IAAI,IAAK;YACrB,KAAK,KAAK,CAAC,EAAE,CAAC,IAAI;YAElB,IAAI,GAAG,OAAO,CAAC,aAAa,GAAG;gBAC3B,YAAY;gBACZ,WAAW,CAAC;gBACZ,WAAW,EAAE;gBACb,QAAQ,EAAE;YACd,OAAO,IAAI,GAAG,OAAO,CAAC,gBAAgB,GAAG;gBACrC,UAAU,IAAI,CAAC;oBAAC,SAAS,KAAK;oBAAI,MAAM,KAAK;iBAAG;YAChD,SAAS;YACb,OAAO,IAAI,GAAG,OAAO,CAAC,aAAa,GAAG;gBAClC;gBACA,MAAM,IAAI,CAAC,EAAE;YACjB,OAAO,IAAI,GAAG,OAAO,CAAC,kBAAkB,KAAK,GAAG,OAAO,CAAC,eAAe,GAAG;gBACtE;YACJ,OAAO,IAAI,GAAG,OAAO,CAAC,cAAc,GAAG;gBACnC,SAAS,GAAG,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,IAAM,WAAW;gBACtD,QAAQ;gBACR,IAAK,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IAAK;oBAClC,IAAI,iLAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,KAAK,iLAAG,CAAC,IAAI,CAAC,GAAG,EAAE;wBACnE,SAAS;wBACT,uCAAuC;wBACvC,QAAQ;wBACR,MAAM;wBACN;oBACJ;gBACJ;gBACA,IAAI,UAAU,OAAO;oBACjB,MAAM,SAAS,MAAM;oBACrB,SAAS,IAAI,CAAC;gBAClB;gBACA,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;YACzB;QACJ;QACA,yDAAyD;QAEzD,4BAA4B;QAC5B,OAAO;IACX;AAEJ;uCAGe,iLAAG,CAAC,OAAO","ignoreList":[0],"debugId":null}}]
}